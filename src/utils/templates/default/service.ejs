// Automatically generated - do not modify!

<% if (service.imports.length>0) { -%>
import { <%=service.imports.join(', ');-%> } from '../models';
<% } -%>
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';

export interface I<%=`${fnpascalCase(name)}`%>APIService {
<%_ for(const method of service.methods) {-%>
  <%_ const temp = []-%>
    <%_ temp.push(...['\r\n\t/**','\t* @method',`\t* @name  ${method.name}`,`\t* @description: ${method.description ? method.description.replace('\r\n', '') : ''}`])-%>
      <%_for (const param of method.params.all) {-%>
      <%_ temp.push(`\t* @param {${param.type.typeName}} ${param.name}`) -%>
      <%_}-%>
      <%_temp.push(`\t*/`)-%>
  <%-temp.join('\r\n')_%>
  <%_ const params = []-%>
  <%_ for(const param of method.params.all) {-%>
    <%_ params.push(`${param.name}${param.required ? '' : '?'}: ${param.type.typeName}`)-%>
  <%_}-%>
<%_params.push(...['customOptions?: {[key:string]:string}','customHeaders?: {[key:string]:string}'])-%>
<%=`\t${method.name}(`_%>
<%- params.join(', ') -%>
  <%-`): Observable<${method.resp[0].typeName}>;`-%>
<% } -%>
}

@Injectable(<%-`${providedIn=== 'none'? '': '{providedIn:'}${providedIn!=='none'?'\''+providedIn+'\'}': ''} `%> )
export class <%=`${fnpascalCase(name)}`%>APIService implements I<%=`${fnpascalCase(name)}`%>APIService {
  public serviceName: string;
  public uri: string;
  constructor(
    public http: HttpClient) {
    this.serviceName = '<%=`${fnpascalCase(name)}`%>API';
    this.uri = '<%-service.uri%>';
  }

<%_ for(const method of service.methods) {-%>
  <%_ const temp = []-%>
    <%_ temp.push(...['\r\n\t/**','\t* @method',`\t* @name  ${method.name}`,`\t* @description: ${method.description ? method.description.replace('\r\n', '') : ''}`])-%>
      <%_for (const param of method.params.all) {-%>
      <%_ temp.push(`\t* @param {${param.type.typeName}} ${param.name}`) -%>
      <%_}-%>
      <%_temp.push(`\t*/`)-%>
  <%-temp.join('\r\n')_%>
  <%_ const params = []-%>
  <%_ for(const param of method.params.all) {-%>
    <%if(param.default){-%>
      <%_ params.push(`${param.name}: ${param.type.typeName} = '${param.default}'`)-%>
      <%} else {-%>
      <%_ params.push(`${param.name}: ${param.type.typeName} ${param.required ? '' : '= null'}`)-%>
      <%}%>
  <%_}-%>
<%_params.push(...['customOptions: {[key:string]:string} = { }','customHeaders: {[key:string]:string} = { }'])-%>
<%= `\tpublic ${method.name}(`-%>
<%- params.join(', ') -%>
  <%-`): Observable<${method.resp[0].typeName}> {`%>
      const options = {
        headers: new HttpHeaders( customHeaders ),
        params: new HttpParams(),
        ...customOptions
      };
  <% if (method.params.query.length > 0) { -%>
  const paramString = [
  <% for(const param of method.params.query) {-%>
<%-`{ 'name': '${param.queryName}', 'value': ${param.name}?${param.name}${param.type.typeName === 'Date' ? '.toISOString()' : '.toString()'} },\r\n`_%>
  <%}-%>
  ].filter(x => x.name && x.value !== null)
    .map(x=>x.name+'='+encodeURIComponent(x.value))
    .join('&');
    options.params = new HttpParams({fromString: paramString});
  <%}-%>
  <%if((method.type === 'post') || (method.type === 'put')){-%>
    <%if(method.params.form.length !== 0) {-%>
      options.headers = new HttpHeaders( customHeaders );
      options.headers.delete('Content-Type');
      const form = new FormData();
      <%for (const param of method.params.form) {-%>
        <%if (param.type.typeName === 'any') {-%>
<%-`form.append('${param.queryName}', ${param.name});\r\n`-%>
        <%} else {-%>
<%-`form.append('${param.queryName}', JSON.stringify(${param.name}));\r\n`-%>
        <%}-%>
      <%}-%>
<%-`return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \`${method.uri}\`, form, options);`-%>
    <%}else{-%>
    <%if (method.params.urlencoded.length !== 0) {%>
    options.headers = new HttpHeaders(Object.assign({'Content-Type': 'application/x-www-form-urlencoded'}, customHeaders));
    const payload = [
      <% for(const param of method.params.urlencoded) {-%>
      <%-`{ 'name': '${param.queryName}', 'value': ${param.name}!== undefined && ${param.name}!==null?${param.name}${param.type.typeName === 'Date' ? '.toISOString()' : '.toString()'}:null },\r\n`_%>
      <%}-%>
      ].filter(x=>x.name&&x.value!== null)
        .map(x=>x.name+'='+encodeURIComponent(x.value))
        .join('&');
<%-`return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \`${method.uri}\`, payload, options);`-%>
    <%} else {-%>
options.headers = new HttpHeaders(Object.assign({'Content-Type': 'application/json; charset=utf-8'}, customHeaders));
      let payload = {};
      <%if (method.params.payload.length > 1) {-%>
        <%for (const param of method.params.payload) {-%>
<%-`payload['${param.queryName}'] = ${param.name};\r\n`-%>
        <%}-%>
      <%} else {-%>
        <%if (method.params.payload.length > 0) {-%>
<%-`payload = ${method.params.payload[0].name};\r\n`-%>
        <%}-%>
      <%}-%>
<%-`return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \`${method.uri}\`, JSON.stringify(payload), options);`-%>
    <%}%>
    <%}-%>
  <%}-%>
  <%if ((method.type === 'get') || (method.type === 'delete')) {-%>
<%-`return this.http.${method.type}\<${method.resp[0].typeName}\>(this.uri + \`${method.uri}\`, options);\r\n`-%>
  <%}-%>
  }
  <% } -%>
}
