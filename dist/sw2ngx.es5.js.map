{"version":3,"file":"sw2ngx.es5.js","sources":["../src/utils/logger.ts","../src/utils/simhash/jenkins.ts","../src/utils/simhash/simhash.ts","../src/utils/parser.ts","../src/interfaces/params.ts","../src/utils/helpcli.ts","../src/utils/templates/module.ts","../src/utils/templates/service.ts","../src/utils/templates/enum.ts","../node_modules/rollup-plugin-node-builtins/src/es6/path.js","../src/utils/templates/model.ts","../src/utils/template-printer.ts","../src/sw2ngx.ts","../src/index.ts"],"sourcesContent":["export interface IColor {\r\n    [key: string]: string;\r\n}\r\nexport const COLORS_HLP = {\r\n    reset: \"\\x1b[0m\",\r\n    bright: \"\\x1b[1m\",\r\n    dim: \"\\x1b[2m\",\r\n    underscore: \"\\x1b[4m\",\r\n    blink: \"\\x1b[5m\",\r\n    reverse: \"\\x1b[7m\",\r\n    hidden: \"\\x1b[8m\"\r\n} as IColor;\r\n\r\nexport const COLORS_TXT = {\r\n    black: \"\\x1b[30m\",\r\n    red: \"\\x1b[31m\",\r\n    green: \"\\x1b[32m\",\r\n    yellow: \"\\x1b[33m\",\r\n    blue: \"\\x1b[34m\",\r\n    magenta: \"\\x1b[35m\",\r\n    cyan: \"\\x1b[36m\",\r\n    white: \"\\x1b[37m\"\r\n} as IColor;\r\n\r\nexport const COLORS_BG = {\r\n    black: \"\\x1b[40m\",\r\n    red: \"\\x1b[41m\",\r\n    green: \"\\x1b[42m\",\r\n    yellow: \"\\x1b[43m\",\r\n    blue: \"\\x1b[44m\",\r\n    magenta: \"\\x1b[45m\",\r\n    cyan: \"\\x1b[46m\",\r\n    white: \"\\x1b[47m\"\r\n} as IColor;\r\n\r\nexport class Logger {\r\n\r\n    public reset(): Logger {\r\n        process.stdout.write(COLORS_HLP.reset);\r\n        return this;\r\n    }\r\n    public bg(color: string): Logger {\r\n        process.stdout.write(COLORS_BG[color]);\r\n        return this;\r\n\r\n    }\r\n    public fg(color: string): Logger {\r\n        process.stdout.write(COLORS_TXT[color]);\r\n        return this;\r\n    }\r\n    public write(line: string): Logger {\r\n        process.stdout.write(line);\r\n        return this;\r\n    }\r\n    public writeln(line: string): Logger {\r\n        process.stdout.write(line);\r\n        process.stdout.write('\\r\\n');\r\n        return this;\r\n    }\r\n    public info(message: string) {\r\n        this.reset().writeln('').fg('blue').writeln(message).reset();\r\n    }\r\n    public err(message: string) {\r\n        this.reset().writeln('').fg('red').writeln(message).reset();\r\n    }\r\n    public ok(message: string) {\r\n        this.reset().writeln('').fg('green').writeln(message).reset();\r\n    }\r\n}","/* eslint-disable no-fallthrough */\r\nexport class Jenkins {\r\n    public pc = 0;\r\n    public pb = 0;\r\n    constructor() {\r\n        /**\r\n         * Default first initial seed.\r\n         */\r\n        this.pc = 0;\r\n\r\n        /**\r\n         * Default second initial seed.\r\n         */\r\n        this.pb = 0;\r\n    }\r\n\r\n    // --------------------------------------------------\r\n    // Public access\r\n    // --------------------------------------------------\r\n\r\n    /**\r\n     * Computes and returns 32-bit hash of given message.\r\n     */\r\n    public hash32(msg: string) {\r\n        const h = this.lookup3(msg, this.pc, this.pb);\r\n        return (h.c).toString(16);\r\n    }\r\n\r\n    /**\r\n     * Computes and returns 32-bit hash of given message.\r\n     */\r\n    public hash64(msg: string) {\r\n        const h = this.lookup3(msg, this.pc, this.pb);\r\n        return (h.b).toString(16) + (h.c).toString(16);\r\n    }\r\n    private lookup3(k: string, pc: number, pb: number) {\r\n        let length = k.length;\r\n        let a;\r\n        let b;\r\n        let c;\r\n\r\n        a = b = c = 0xdeadbeef + length + pc;\r\n        c += pb;\r\n\r\n        let offset = 0;\r\n        let mixed;\r\n        while (length > 12) {\r\n            a += k.charCodeAt(offset + 0);\r\n            a += k.charCodeAt(offset + 1) << 8;\r\n            a += k.charCodeAt(offset + 2) << 16;\r\n            a += k.charCodeAt(offset + 3) << 24;\r\n\r\n            b += k.charCodeAt(offset + 4);\r\n            b += k.charCodeAt(offset + 5) << 8;\r\n            b += k.charCodeAt(offset + 6) << 16;\r\n            b += k.charCodeAt(offset + 7) << 24;\r\n\r\n            c += k.charCodeAt(offset + 8);\r\n            c += k.charCodeAt(offset + 9) << 8;\r\n            c += k.charCodeAt(offset + 10) << 16;\r\n            c += k.charCodeAt(offset + 11) << 24;\r\n\r\n            mixed = this.mix(a, b, c);\r\n            a = mixed.a;\r\n            b = mixed.b;\r\n            c = mixed.c;\r\n\r\n            length -= 12;\r\n            offset += 12;\r\n        }\r\n\r\n        switch (length) {\r\n            case 12:\r\n                c += k.charCodeAt(offset + 11) << 24;\r\n            case 11:\r\n                c += k.charCodeAt(offset + 10) << 16;\r\n            case 10:\r\n                c += k.charCodeAt(offset + 9) << 8;\r\n            case 9:\r\n                c += k.charCodeAt(offset + 8);\r\n            case 8:\r\n                b += k.charCodeAt(offset + 7) << 24;\r\n            case 7:\r\n                b += k.charCodeAt(offset + 6) << 16;\r\n            case 6:\r\n                b += k.charCodeAt(offset + 5) << 8;\r\n            case 5:\r\n                b += k.charCodeAt(offset + 4);\r\n            case 4:\r\n                a += k.charCodeAt(offset + 3) << 24;\r\n            case 3:\r\n                a += k.charCodeAt(offset + 2) << 16;\r\n            case 2:\r\n                a += k.charCodeAt(offset + 1) << 8;\r\n            case 1:\r\n                a += k.charCodeAt(offset + 0);\r\n                break;\r\n\r\n            case 0:\r\n                return { c: c >>> 0, b: b >>> 0 };\r\n        }\r\n\r\n        // Final mixing of three 32-bit values in to c\r\n        mixed = this.finalMix(a, b, c)\r\n        a = mixed.a;\r\n        b = mixed.b;\r\n        c = mixed.c;\r\n\r\n        return { c: c >>> 0, b: b >>> 0 };\r\n    }\r\n\r\n    /**\r\n     * Mixes 3 32-bit integers reversibly but fast.\r\n     */\r\n    private mix(a: number, b: number, c: number) {\r\n        a -= c;\r\n        a ^= this.rot(c, 4);\r\n        c += b;\r\n        b -= a;\r\n        b ^= this.rot(a, 6);\r\n        a += c;\r\n        c -= b;\r\n        c ^= this.rot(b, 8);\r\n        b += a;\r\n        a -= c;\r\n        a ^= this.rot(c, 16);\r\n        c += b;\r\n        b -= a;\r\n        b ^= this.rot(a, 19);\r\n        a += c;\r\n        c -= b;\r\n        c ^= this.rot(b, 4);\r\n        b += a;\r\n        return { a: a, b: b, c: c };\r\n    }\r\n\r\n    /**\r\n     * Final mixing of 3 32-bit values (a,b,c) into c\r\n     */\r\n    private finalMix(a: number, b: number, c: number) {\r\n        c ^= b;\r\n        c -= this.rot(b, 14);\r\n        a ^= c;\r\n        a -= this.rot(c, 11);\r\n        b ^= a;\r\n        b -= this.rot(a, 25);\r\n        c ^= b;\r\n        c -= this.rot(b, 16);\r\n        a ^= c;\r\n        a -= this.rot(c, 4);\r\n        b ^= a;\r\n        b -= this.rot(a, 14);\r\n        c ^= b;\r\n        c -= this.rot(b, 24);\r\n        return { a: a, b: b, c: c };\r\n    }\r\n    /**\r\n     * Rotate x by k distance.\r\n     */\r\n    private rot(x: number, k: number) {\r\n        return (((x) << (k)) | ((x) >> (32 - (k))));\r\n    }\r\n\r\n}\r\n\r\n\r\n// --------------------------------------------------\r\n// Private methods\r\n// --------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Jenkins} from './jenkins';\r\n\r\nexport interface ISimHashOptions {\r\n    kshingles?: number;\r\n    maxFeatures?: number;\r\n}\r\n\r\nexport class SimHash {\r\n    public kshingles = 4;\r\n    public maxFeatures = 128;\r\n    constructor(options?: ISimHashOptions) {\r\n        if (options) {\r\n            /**\r\n             * By default, we tokenize input into chunks of this size.\r\n             */\r\n            if (options.kshingles) {\r\n                this.kshingles = options.kshingles;\r\n            }\r\n            /**\r\n             * By default, this many number of minimum shingles will \r\n             * be combined to create the final hash.\r\n             */\r\n            if (options.maxFeatures) {\r\n                this.maxFeatures = options.maxFeatures;\r\n            }\r\n        }\r\n    }\r\n\r\n    // --------------------------------------------------\r\n    // Public access\r\n    // --------------------------------------------------\r\n\r\n    /**\r\n     * Driver function.\r\n     */\r\n    public hash(input: string) {\r\n        const tokens = this.tokenize(input);\r\n        const shingles = [];\r\n        const jenkins = new Jenkins();\r\n        // eslint-disable-next-line @typescript-eslint/no-for-in-array\r\n        for (const i in tokens) {\r\n            shingles.push(jenkins.hash32(tokens[i]));\r\n        }\r\n        let simhash = this.combineShingles(shingles);\r\n        simhash >>>= 0;\r\n        return simhash;\r\n    }\r\n    /**\r\n     * Tokenizes input into 'kshingles' number of tokens.\r\n     */\r\n    private tokenize(original: string) {\r\n        const size = original.length;\r\n        if (size <= this.kshingles) {\r\n            return [original.substr(0)];\r\n        }\r\n\r\n        const shingles = [];\r\n        for (let i = 0; i < size; i = i + this.kshingles) {\r\n            shingles.push(i + this.kshingles < size ? original.slice(i, i + this.kshingles) : original.slice(i));\r\n        }\r\n        return shingles;\r\n    }\r\n\r\n    private combineShingles(shingles: any[]) {\r\n        if (shingles.length === 0) return;\r\n\r\n        if (shingles.length === 1) return shingles[0];\r\n\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        shingles.sort(this.hashComparator);\r\n        if (shingles.length > this.maxFeatures) shingles = shingles.splice(this.maxFeatures);\r\n\r\n        let simhash = 0x0;\r\n        let mask = 0x1;\r\n        for (let pos = 0; pos < 32; pos++) {\r\n            let weight = 0;\r\n            // eslint-disable-next-line @typescript-eslint/no-for-in-array\r\n            for (const i in shingles) {\r\n                const shingle = parseInt(shingles[i], 16);\r\n                weight += !(~shingle & mask) === true ? 1 : -1;\r\n            }\r\n            if (weight > 0) simhash |= mask;\r\n            mask <<= 1;\r\n        }\r\n\r\n        return simhash;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Calculates binary hamming distance of two base 16 integers.\r\n     */\r\n    private hammingDistanceSlow(x: string, y: string) {\r\n        let distance = 0;\r\n        let val = parseInt(x, 16) ^ parseInt(y, 16);\r\n        while (val) {\r\n            ++distance;\r\n            val &= val - 1;\r\n        }\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * TODO: Use a priority queue. Till then this comparator is \r\n     * used to find the least 'maxFeatures' shingles.\r\n     */\r\n    public hashComparator(a: number, b: number) {\r\n        return a < b ? -1 : (a > b ? 1 : 0);\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { ISwaggerConfig, ISwaggerProperty, ISwaggerParam } from './../interfaces/swagger.interface';\r\nimport { Logger } from './logger';\r\nimport { IParserModel, IParserEnum, IParserResolvedType, IParserServiceList, IParserParam, IParserMethod } from '../interfaces/parser';\r\nimport { SimHash } from './simhash/simhash';\r\nimport { paramCase, camelCase, pascalCase } from 'change-case';\r\n\r\nexport class Parser {\r\n    private _enums: IParserEnum[] = [];\r\n    private _models: IParserModel[] = [];\r\n    private _servicesList: IParserServiceList = {};\r\n    private _logger: Logger = new Logger();\r\n    private _simHash: SimHash = new SimHash();\r\n\r\n    public parse(config: ISwaggerConfig): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._logger.info('start parsing');\r\n            this.parseModels(config).then(() => {\r\n                this._logger.info('models parsed');\r\n                this.parseServices(config).then(() => {\r\n                    this._logger.info('services parsed');\r\n                    resolve([this._enums, this._models, this._servicesList]);\r\n                }, (err) => {\r\n                    this._logger.info('services error');\r\n                    this.handleError(JSON.stringify(err));\r\n                    reject(err);\r\n                })\r\n            }, (err) => {\r\n                this._logger.err('[ ERROR ]: Parsing enums error!');\r\n                this.handleError(JSON.stringify(err));\r\n                reject(err);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    public parseModels(config: ISwaggerConfig): Promise<[IParserEnum[], IParserModel[]]> {\r\n        const models = config.definitions;\r\n        return new Promise<[IParserEnum[], IParserModel[]]>((resolve) => {\r\n            for (const key in models) {\r\n                const model = {\r\n                    name: '',\r\n                    description: '',\r\n                    imports: [],\r\n                    props: []\r\n                } as IParserModel;\r\n                if (models[key]) {\r\n                    const imports = [];\r\n                    model.name = 'I'+key;\r\n                    model.description = models[key].description;\r\n                    for (const prop in models[key].properties) {\r\n                        if (models[key].properties[prop]) {\r\n                            const temp = this.parseModelProp(prop, models[key].properties[prop], model.name);\r\n                            imports.push(temp.imports);\r\n                            model.props.push(temp);\r\n                        }\r\n                    }\r\n                    model.imports = this.resolveImports(imports);\r\n                }\r\n                this._models.push(model);\r\n            }\r\n            resolve([this._enums, this._models]);\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n    public parseTags(tags: string[]) {\r\n        if (tags.length >= 1) {\r\n            return tags[0];\r\n        } else {\r\n            return '__common'\r\n        }\r\n    }\r\n\r\n    public parseServices(config: ISwaggerConfig): Promise<IParserServiceList> {\r\n        return new Promise<IParserServiceList>((resolve) => {\r\n            const result: IParserServiceList = {\r\n                __common: {\r\n                    uri: config.basePath,\r\n                    imports: [],\r\n                    methods: []\r\n                }\r\n            };\r\n            for (const path in config.paths) {\r\n                if (config.paths[path]) {\r\n                    for (const method in config.paths[path]) {\r\n                        if (config.paths[path][method]) {\r\n                            this._logger.ok(path);\r\n                            const parsedMethod = this.parseMethod(path, method, config.paths[path][method]);\r\n                            if (result[parsedMethod.tag]) {\r\n                                const duplicates = result[parsedMethod.tag].methods.filter(x=> x.name.replace(/\\d+$/ig, '')===parsedMethod.name); \r\n                                if(duplicates.length>0){\r\n                                    parsedMethod.name = parsedMethod.name+duplicates.length;\r\n                                }\r\n                                result[parsedMethod.tag].methods.push(parsedMethod);\r\n                            } else {\r\n                                result[parsedMethod.tag] = {\r\n                                    uri: config.basePath,\r\n                                    imports: [],\r\n                                    methods: [parsedMethod]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this._servicesList = this.resolveServiceImports(result);\r\n            resolve(this._servicesList);\r\n        });\r\n    }\r\n    public genMethodName(uri: string, type: string): string {\r\n        const tmp = pascalCase(uri.replace(/\\//ig, '-').replace(/\\{|\\}|\\$/ig, ''));\r\n        switch (type.toLocaleLowerCase()) {\r\n            case 'post':\r\n                return 'send'+ tmp;\r\n            case 'delete':\r\n                return 'delete'+ tmp;\r\n            case 'put':\r\n                return 'update'+ tmp;\r\n            case 'get':\r\n            default:\r\n                return 'get'+ tmp;\r\n        }\r\n    }\r\n    public parseMethod(uri: string, type: string, method: any): IParserMethod {\r\n\r\n        const name = method.operationId? method.operationId: this.genMethodName(uri, type);\r\n        const tag = this.parseTags(method.tags);\r\n        const params = this.parseParams(method.parameters, camelCase(name));\r\n        const resp = this.parseResponse(method.responses, camelCase(name));\r\n        return {\r\n            uri: uri.replace(/\\{/ig, '${'),\r\n            type: type,\r\n            tag: tag,\r\n            name: camelCase(name),\r\n            description: method.summary,\r\n            params: params,\r\n            resp: resp\r\n        }\r\n    }\r\n\r\n    public resolveServiceImports(servicesList: IParserServiceList): IParserServiceList {\r\n        for (const serv in servicesList) {\r\n            if (servicesList[serv]) {\r\n                const imports = [];\r\n                for (const method of servicesList[serv].methods) {\r\n                    if (method.resp.length > 0) {\r\n                        for (const item of method.resp) {\r\n                            imports.push(item.typeImport);\r\n                        }\r\n                    }\r\n                    for (const param of method.params.all) {\r\n                        if (param.type.typeImport) {\r\n                            imports.push(param.type.typeImport);\r\n                        }\r\n                    }\r\n                }\r\n                servicesList[serv].imports = this.resolveImports(imports);\r\n            }\r\n        }\r\n        return servicesList;\r\n    }\r\n\r\n    public get models(): IParserModel[] {\r\n        return this._models;\r\n    }\r\n\r\n    public get enums(): IParserEnum[] {\r\n        return this._enums;\r\n    }\r\n\r\n    public get services(): IParserServiceList {\r\n        return this._servicesList;\r\n    }\r\n\r\n    public parseParams(params: ISwaggerParam[], method: string) {\r\n        const parsed = {\r\n            all: [],\r\n            uri: [],\r\n            query: [],\r\n            payload: [],\r\n            form: [],\r\n            urlencoded:[]\r\n        } as {\r\n                [key: string]: IParserParam[];\r\n            };\r\n        for (const param of params) {\r\n            if (param) {\r\n                let type = null;\r\n                const paramName = this.resolveParamName(param.name);\r\n                if (param.schema) {\r\n                    type = this.resolveType(param.schema as ISwaggerProperty, paramName, method);\r\n                } else {\r\n                    type = this.resolveType(param as ISwaggerProperty, paramName, method);\r\n                }\r\n\r\n\r\n                const res = {\r\n                    name: this.clearName(param.name),\r\n                    queryName: paramName,\r\n                    description: param.description ? param.description : '',\r\n                    required: param.required ? true : false,\r\n                    type: type\r\n                } as IParserParam;\r\n\r\n                if (param.in === 'path') {\r\n                    parsed.uri.push(res);\r\n                }\r\n                if (param.in === 'query') {\r\n                    parsed.query.push(res);\r\n                }\r\n                if (param.in === 'body') {\r\n                    parsed.payload.push(res);\r\n                }\r\n                if (param.in === 'formData') {\r\n                    parsed.form.push(res);\r\n                }\r\n                parsed.all.push(res);\r\n            }\r\n        }\r\n        return parsed;\r\n    }\r\n\r\n    public clearName(name: string): string {\r\n        const baseTypes = [\r\n            'number', 'string', 'boolean', 'any', 'array'\r\n        ];\r\n        let result = name.replace(/\\.|-/ig, '');\r\n        if (baseTypes.includes(result)) {\r\n            result = result + 'Param';\r\n        }\r\n        return result;\r\n    }\r\n    public resolveParamName(name: string): string {\r\n        this._logger.ok(name);\r\n        const temp = name.split('.');\r\n        if (temp.length > 1) {\r\n            const result = temp.pop() as string;\r\n            console.log(result);\r\n            const tmpResult = result.split('');\r\n            tmpResult[0] = tmpResult[0].toUpperCase();\r\n            return tmpResult.join('');\r\n        }\r\n        return temp.pop() as any;\r\n    }\r\n\r\n    public parseResponse(responses: any, method: string): IParserResolvedType[] {\r\n        if (responses['200']) {\r\n            if (responses['200']['schema']) {\r\n                let resolvedType: IParserResolvedType = { typeName: '', typeImport: '' } as IParserResolvedType;\r\n                if (responses['200']['schema']['enum']) {\r\n                    resolvedType.typeName = 'number';\r\n                } else {\r\n                    resolvedType = this.resolveType(responses['200']['schema'], 'response', method);\r\n                }\r\n                if (resolvedType.typeName === '') {\r\n                    return [{\r\n                        typeName: 'any',\r\n                        typeImport: null\r\n                    }];\r\n                } else {\r\n                    if (resolvedType.typeImport !== '') {\r\n                        return [resolvedType];\r\n                    } else {\r\n                        return [{\r\n                            typeName: resolvedType.typeName,\r\n                            typeImport: null\r\n                        }];\r\n                    }\r\n                }\r\n            } else {\r\n                return [{\r\n                    typeName: 'any',\r\n                    typeImport: null\r\n                }];\r\n            }\r\n        } else {\r\n            return [{\r\n                typeName: 'any',\r\n                typeImport: null\r\n            }];\r\n        }\r\n    }\r\n\r\n    public resolveImports(imports: any[]): any[] {\r\n        const result: any[] = [];\r\n        for (const imp of imports) {\r\n            if (!result.includes(imp)) {\r\n                if (imp !== null) {\r\n                    result.push(imp);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public parseModelProp(name: string, prop: ISwaggerProperty, modelName: string) {\r\n        const resolvedType = this.resolveType(prop, name, modelName);\r\n        return {\r\n            name: name,\r\n            type: resolvedType.typeName,\r\n            imports: resolvedType.typeImport,\r\n            description: prop.description !== '' ? prop.description : ''\r\n        }\r\n    }\r\n\r\n    public resolveType(prop: ISwaggerProperty, name: string, parent: string): IParserResolvedType {\r\n        const curname = name.replace(/\\.|-/ig, '_');\r\n        if (prop === undefined) {\r\n            return {\r\n                typeName: 'any',\r\n                typeImport: null\r\n            };\r\n        }\r\n        if ((!prop.enum) && (!prop.format)) {\r\n            if (prop.$ref !== undefined) {\r\n                const temp = prop.$ref.split('/');\r\n                return {\r\n                    typeName: 'I'+temp[temp.length - 1],\r\n                    typeImport: 'I'+temp[temp.length - 1]\r\n                };\r\n            }\r\n            if ((prop.type === 'boolean') ||\r\n                (prop.type === 'string') ||\r\n                (prop.type === 'number')) {\r\n                return {\r\n                    typeName: prop.type,\r\n                    typeImport: null\r\n                };\r\n            }\r\n            if (prop.type === 'array') {\r\n                if (prop.items) {\r\n                    const temp = this.resolveType(prop.items, curname, parent);\r\n                    return {\r\n                        typeName: temp.typeName + \"[]\",\r\n                        typeImport: temp.typeImport\r\n                    };\r\n                }\r\n\r\n            }\r\n            if (prop.type === 'object') {\r\n                return {\r\n                    typeName: 'any',\r\n                    typeImport: null\r\n                };\r\n            }\r\n        } else {\r\n            if (prop.enum !== undefined) {\r\n                return this.resolveEnums(prop.description, prop.enum, name, parent);\r\n            }\r\n            if (prop.format) {\r\n                const result = { typeName: '', typeImport: null };\r\n                switch (prop.format) {\r\n                    case 'date-time':\r\n                    case 'date':\r\n                        result.typeName = 'string';\r\n                        break;\r\n                    case 'int32':\r\n                    case 'integer':\r\n                    case 'float':\r\n                    case 'double':\r\n                    case 'int64':\r\n                        result.typeName = 'number';\r\n                        break;\r\n                    case 'password':\r\n                        result.typeName = 'string';\r\n                        break;\r\n                    default:\r\n                        result.typeName = 'any';\r\n                        break;\r\n                }\r\n                return result;\r\n            }\r\n\r\n        }\r\n        return {\r\n            typeName: 'any',\r\n            typeImport: null\r\n        };\r\n    }\r\n\r\n    public handleError(e: any) {\r\n        this._logger.reset().fg('red').writeln(e).reset();\r\n    }\r\n\r\n    public resolveEnums(description: string, evalue: number[], curname: string, parent: string): IParserResolvedType {\r\n        const hashName = this._simHash.hash(evalue.join('|'));\r\n        // this._logger.ok(`${parent}_${curname}Set: ${hashName.toString(16)}`);\r\n        // this._logger.err(hashName);\r\n        const extact = this.extractEnumDescription(description ? description : '');\r\n        //  this._logger.err(JSON.stringify({description, evalue, curname, parent}))\r\n\r\n        if(extact === null){\r\n            const numbers='1234567890'.split('');\r\n            if(evalue.join('').split('').filter(x=> !numbers.includes(x)).length>0){\r\n                return {\r\n                    typeName: evalue.map(x=>`'${x}'`).join(' | '),\r\n                    typeImport: null\r\n                }\r\n            }\r\n            return {\r\n                typeName: evalue.join(' | '),\r\n                typeImport: null\r\n            }\r\n        }\r\n        const withParentName = `${pascalCase(paramCase(parent).replace(/^i-/ig,'')+'-'+paramCase(curname+'Set'))}`\r\n        const propEnum: IParserEnum = {\r\n            name: `${pascalCase(curname)}Set`,\r\n            modelName: parent,\r\n            value: extact,\r\n            hash: hashName.toString(16)\r\n        };\r\n\r\n        const duplicate = this._enums.filter(x=> x.name.replace(/\\d+$/ig,'')=== propEnum.name);\r\n        const extDuplicate = this._enums.filter(x=> x.name.replace(/\\d+$/ig,'')===withParentName);\r\n        if(duplicate.length>0){\r\n            const equals = duplicate.filter(x=> x.hash===propEnum.hash);\r\n            if(equals.length>0){\r\n                return {\r\n                    typeName: equals[0].name,\r\n                    typeImport: equals[0].name\r\n                }\r\n            }else{\r\n                if(extDuplicate.length>0){\r\n                    propEnum.name = `${withParentName}${duplicate.length}`\r\n                }else{\r\n                    propEnum.name = withParentName;\r\n                }\r\n                this._enums.push(propEnum);\r\n                return {\r\n                    typeName: propEnum.name,\r\n                    typeImport: propEnum.name\r\n                }\r\n            }\r\n        }else{\r\n            this._enums.push(propEnum);\r\n            return {\r\n                typeName: propEnum.name,\r\n                typeImport: propEnum.name\r\n            }\r\n        }\r\n    }\r\n\r\n    public extractEnumDescription(description: string) {\r\n        const result = [];\r\n        const indexOf = description.search(/\\(\\d/ig);\r\n        if (indexOf !== -1) {\r\n            description = description.substr(indexOf + 1).replace(')', '');\r\n            const temp = description.split(',');\r\n            for (const tmp of temp) {\r\n                \r\n                const key = tmp.split('=');\r\n                result.push({\r\n                    key: key[1],\r\n                    val: parseInt(key[0], 10)\r\n                });\r\n            }\r\n            return result;\r\n        } else {\r\n            return null;\r\n        }\r\n        \r\n    }\r\n}\r\n","export const GeneratorParams: IGeneratorParam[] = [\r\n    {\r\n        name: 'config',\r\n        keys: ['-c', '--c'],\r\n        noValue: false,\r\n        description: 'Swagger doc path'\r\n    },\r\n    {\r\n        name: 'out',\r\n        keys: ['-o', '--o'],\r\n        noValue: false,\r\n        description: 'Output directory'\r\n    },\r\n    {\r\n        name: 'help',\r\n        keys: [\r\n            '-h', '--h', 'help', '-help'\r\n        ],\r\n        noValue: true,\r\n        description: 'Call help'\r\n    }\r\n];\r\n\r\nexport interface IGeneratorParam {\r\n    name: string;\r\n    keys: string[];\r\n    noValue: boolean;\r\n    description: string;\r\n}","\r\nimport { Logger } from \"./logger\";\r\nimport { GeneratorParams } from \"../interfaces/params\";\r\nimport { IGeneratorConfig } from \"../interfaces/config\";\r\n\r\nexport class HelpCLI {\r\n    public logger: Logger  = new Logger();\r\n    public parseArgs(): IGeneratorConfig {\r\n        const params: IGeneratorConfig = {\r\n            config: '',\r\n            out: '',\r\n            help: false\r\n        };\r\n        const args = process.argv;\r\n        for (let i = 0; i < args.length; i++) {\r\n            for (const param of GeneratorParams) {\r\n                if (param.keys.includes(args[i])) {\r\n                    if (param.noValue) {\r\n                        params[param.name] = true;\r\n                        break;\r\n                    } else {\r\n                        params[param.name] = args[i + 1];\r\n                        i++;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return params;\r\n    }\r\n    public printHelp() {\r\n        this.logger\r\n            .fg('green')\r\n            .writeln('')\r\n            .write('[HELP]')\r\n            .write(':')\r\n            .writeln('')\r\n            .reset()\r\n            .writeln('');\r\n        for (const key of GeneratorParams) {\r\n            let line = `     ${key.name}          `;\r\n            line = line.substr(0, 15);\r\n            const args = new Array(40).fill(' ');\r\n            let i = 1;\r\n            for (const arg of key.keys) {\r\n                args[i + 2] = arg;\r\n                i = i + 2;\r\n            }\r\n            this.logger.write(line)\r\n                .fg('yellow');\r\n            line = args.join('');\r\n            line = line.substr(0, 20);\r\n            this.logger.write(line)\r\n                .reset();\r\n            line = '     ' + key.description;\r\n            this.logger.write(line);\r\n            this.logger.writeln('');\r\n        }\r\n    }\r\n}\r\n","export class ModuleTemplate {\r\n\r\n  public compile(value: string[]) {\r\n    const servicesList: string[] = [];\r\n    for (const el of value) {\r\n      servicesList.push(`${el}APIService,`);\r\n    }\r\n    const importsHead: string = servicesList.join('\\r\\n\\t');\r\n    const importsBody: string = servicesList.join('\\r\\n\\t\\t\\t\\t');\r\n    return `\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport {\r\n  ${importsHead}\r\n} from './services';\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule\r\n  ],\r\n  exports: [],\r\n  declarations: [],\r\n  providers: [\r\n    ${importsBody}\r\n  ],\r\n})\r\nexport class APIModule { }\r\n`;\r\n  }\r\n}","import { IParserService, IParserMethod } from './../../interfaces/parser';\r\nexport class ServiceTemplate {\r\n  public imports(imp: string[]): string {\r\n    const imports = [];\r\n    if (imp.length === 0) {\r\n      return '';\r\n    }\r\n    imports.push(`import {`);\r\n    for (const item of imp) {\r\n      imports.push(`${item},`);\r\n    }\r\n    imports.push(`} from '../models';`);\r\n    return imports.join('\\r\\n');\r\n  }\r\n\r\n  public methodDescription(method: IParserMethod): string {\r\n    const temp = [];\r\n    temp.push(`\r\n    /**\r\n     * @method\r\n     * @name  ${method.name}\r\n     * @description${method.description ? method.description.replace('\\r\\n', '') : ''}\\r\\n`\r\n    );\r\n    for (const param of method.params.all) {\r\n      temp.push(`     * @param {${param.type.typeName}} ${param.name}\\r\\n`);\r\n    }\r\n    temp.push(`     */`);\r\n    return temp.join('');\r\n\r\n  }\r\n\r\n  public methodParams(method: IParserMethod, isInterface: boolean): string {\r\n    const temp = [];\r\n    for (const param of method.params.all) {\r\n      if (!isInterface) {\r\n        if (param.default) {\r\n          temp.push(`${param.name}: ${param.type.typeName} = '${param.default}'`);\r\n        } else {\r\n          temp.push(`${param.name}: ${param.type.typeName}` + (param.required ? '' : ' = null'));\r\n        }\r\n      } else {\r\n        temp.push(`${param.name}${param.required ? '' : '?'}: ${param.type.typeName}`);\r\n      }\r\n    }\r\n    return temp.join(', ');\r\n  }\r\n\r\n  public methodBody(method: IParserMethod) {\r\n    const temp = [];\r\n    if (method.params.query.length > 0) {\r\n      temp.push(`\r\n        let paramString = '';`);\r\n      let isFirst = true;\r\n      for (const param of method.params.query) {\r\n        temp.push(`\r\n        if ((${param.name} !== undefined) && (${param.name} !== null)) {\r\n            paramString += '${isFirst ? '' : '&'}${param.queryName}=' + encodeURIComponent(${param.name}${param.type.typeName === 'Date' ? '.toISOString()' : '.toString()'});\r\n        }${param.required ? \" else { throw new Error('Required param(\" + param.name + \") not set!'); }\" : ''}`);\r\n        isFirst = false;\r\n      }\r\n      temp.push(`\r\n        options.params = new HttpParams({fromString: paramString});`);\r\n    }\r\n\r\n    if ((method.type === 'post') || (method.type === 'put')) {\r\n\r\n      if (method.params.form.length !== 0) {\r\n        temp.push(`\r\n        options.headers = new HttpHeaders();\r\n        options.headers.delete('Content-Type');\r\n        const form = new FormData();`);\r\n        for (const param of method.params.form) {\r\n          if (param.type.typeName === 'any') {\r\n            temp.push(`\r\n        form.append('${param.queryName}', ${param.name});`);\r\n          } else {\r\n            temp.push(`\r\n        form.append('${param.queryName}', JSON.stringify(${param.name}));`);\r\n          }\r\n        }\r\n        temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`, form, options);`);\r\n      } else {\r\n        if (method.params.urlencoded.length !== 0) {\r\n          temp.push(`\r\n        let payload = '';\r\n        options.headers = new HttpHeaders({'Content-Type': 'application/x-www-form-urlencoded'});`);\r\n          let isFirst = true;\r\n          for (const param of method.params.urlencoded) {\r\n            temp.push(`\r\n        if ((${param.name} !== undefined) && (${param.name} !== null)) {\r\n            payload += '${isFirst ? '' : '&'}${param.queryName}=' + encodeURIComponent(${param.name}${param.type.typeName === 'Date' ? '.toISOString()' : '.toString()'});\r\n        }${param.required ? \" else { throw new Error('Required param(\" + param.name + \") not set!'); }\" : ''}`);\r\n            isFirst = false;\r\n          }\r\n          temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`, payload, options);`);\r\n        } else {\r\n          temp.push(`\r\n        // tslint:disable-next-line:prefer-const\r\n        let payload = {};\r\n        options.headers = new HttpHeaders({'Content-Type': 'application/json; charset=utf-8'});`);\r\n          if (method.params.payload.length > 1) {\r\n            for (const param of method.params.payload) {\r\n              temp.push(`\r\n        payload['${param.queryName}'] = ${param.name};`);\r\n            }\r\n          } else {\r\n            if (method.params.payload.length > 0) {\r\n              temp.push(`\r\n        payload = ${method.params.payload[0].name};`);\r\n            }\r\n          }\r\n          temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`, JSON.stringify(payload), options);`);\r\n        }\r\n      }\r\n    }\r\n\r\n    if ((method.type === 'get') || (method.type === 'delete')) {\r\n      temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`${method.params.query.length !== 0 ? ', options' : ''});`);\r\n    }\r\n\r\n    return temp.join('\\r\\n');\r\n  }\r\n  public body(methods: IParserMethod[]) {\r\n    const interBody: string[] = [];\r\n    const serviceBody: string[] = [];\r\n    for (const method of methods) {\r\n      interBody.push(`${this.methodDescription(method)}\r\n    ${method.name}(${this.methodParams(method, true)}): Observable<${method.resp[0].typeName}>;`);\r\n      serviceBody.push(`\\tpublic ${method.name}(${this.methodParams(method, false)}): Observable<${method.resp[0].typeName}> {\r\n        const options = {\r\n            headers: new HttpHeaders(),\r\n            params: new HttpParams()\r\n        };\r\n${this.methodBody(method)}\r\n    }`);\r\n    }\r\n    return { interfaceBody: interBody.join('\\r\\n'), serviceBody: serviceBody.join('\\r\\n') }\r\n  }\r\n  public compile(value: IParserService, name: string): string {\r\n    if (value.methods.length > 0) {\r\n      const imports: string = this.imports(value.imports);\r\n      const { interfaceBody, serviceBody } = this.body(value.methods);\r\n      return `import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\n${imports}\r\nexport interface I${name}APIService {\r\n${interfaceBody}\r\n}\r\n\r\n@Injectable({ providedIn:'root' })\r\nexport class ${name}APIService implements I${name}APIService {\r\n  public serviceName: string;\r\n  public uri: string;\r\n  constructor(\r\n    public http: HttpClient) {\r\n    this.serviceName = '${name}API';\r\n    this.uri = '${value.uri}';\r\n  }\r\n${serviceBody}\r\n}\\r\\n`;\r\n    } else {\r\n      return '';\r\n    }\r\n\r\n  }\r\n}","import { IParserEnum } from './../../interfaces/parser';\r\nexport class EnumTemplate {\r\n  public body(value: IParserEnum): string {\r\n    const temp: string[] = [];\r\n    for (const param of value.value) {\r\n      temp.push(`${param.key}= ${parseInt(param.val.toString(), 10).toString() !== 'NaN' ? param.val : '\"' + param.val + '\"'}`);\r\n    }\r\n    return temp.join(',\\r\\n\\t');\r\n  }\r\n  public compile(value: IParserEnum): string {\r\n    return `\r\nexport enum ${value.name} {\r\n  ${this.body(value)}\r\n}\r\n`;\r\n  }\r\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexport function resolve() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : '/';\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexport function normalize(path) {\n  var isPathAbsolute = isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!path && !isPathAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\nexport function join() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n}\n\n\n// path.relative(from, to)\n// posix version\nexport function relative(from, to) {\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\nexport var sep = '/';\nexport var delimiter = ':';\n\nexport function dirname(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n\n\nexport function extname(path) {\n  return splitPath(path)[3];\n}\nexport default {\n  extname: extname,\n  basename: basename,\n  dirname: dirname,\n  sep: sep,\n  delimiter: delimiter,\n  relative: relative,\n  join: join,\n  isAbsolute: isAbsolute,\n  normalize: normalize,\n  resolve: resolve\n};\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ?\n    function (str, start, len) { return str.substr(start, len) } :\n    function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","import { IParserModel } from './../../interfaces/parser';\r\nexport class ModelTemplate {\r\n\r\n  public modelImports(modelImports: string[], name: string) {\r\n    const imports = [];\r\n    if (modelImports.length === 0) { return ''; }\r\n    imports.push(`import {`);\r\n    for (const item of modelImports) {\r\n      if (item !== name) {\r\n        imports.push(`${item},`);\r\n      }\r\n    }\r\n    imports.push(`} from './';`);\r\n    return imports.join('\\r\\n');\r\n\r\n  }\r\n\r\n  public body(value: any): { [key: string]: string } {\r\n    const itemp: string[] = []\r\n    const temp: string[] = [];\r\n    for (const param of value) {\r\n      if (param.description) {\r\n        itemp.push(`/* ${param.description} */`);\r\n      }\r\n      itemp.push(`${param.name} : ${param.type};`);\r\n      temp.push(`public ${param.name}: ${param.type};`);\r\n    }\r\n    return {\r\n      iprop: itemp.join('\\r\\n\\t'),\r\n      prop: temp.join('\\r\\n\\t')\r\n    }\r\n  }\r\n  public compile(value: IParserModel) {\r\n    const { iprop } = this.body(value.props);\r\n    return `\r\n${this.modelImports(value.imports, value.name)}\r\n\r\nexport interface ${value.name} {\r\n  ${iprop}\r\n}\r\n`;\r\n  }\r\n}\r\n","import { ModuleTemplate } from './templates/module';\r\nimport { ServiceTemplate } from './templates/service';\r\nimport { Logger } from './logger';\r\nimport { EnumTemplate } from './templates/enum';\r\nimport { IParserEnum, IParserServiceList, IParserModel, IParserService } from './../interfaces/parser';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { ModelTemplate } from './templates/model';\r\nimport { paramCase } from 'change-case';\r\n\r\nexport class TemplatePrinter {\r\n  private out = '';\r\n  private enumCompiler: EnumTemplate = new EnumTemplate();\r\n  private modelCompiler: ModelTemplate = new ModelTemplate();\r\n  private serviceCompiler: ServiceTemplate = new ServiceTemplate();\r\n  private moduleCompiler: ModuleTemplate = new ModuleTemplate();\r\n  private _printedServices: string[] = [];\r\n  private _logger: Logger = new Logger();\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public createFolders(): Promise<any> {\r\n    return new Promise(\r\n      (resolve, reject) => {\r\n        try {\r\n          fs.mkdirSync(path.resolve(this.out));\r\n          fs.mkdirSync(path.resolve(this.out + '/models'));\r\n          fs.mkdirSync(path.resolve(this.out + '/models/enums'));\r\n          fs.mkdirSync(path.resolve(this.out + '/services'));\r\n          resolve();\r\n          return;\r\n        } catch (error) {\r\n          reject();\r\n        } \r\n      }\r\n    );\r\n  }\r\n\r\n  public print(enums: IParserEnum[], models: IParserModel[], services: IParserServiceList, out: string): Promise<any> {\r\n    this.out = out;\r\n    return new Promise<any>((resolve, reject) => {\r\n      this.createFolders().then(() => {\r\n        for (const item of enums) {\r\n          this.printEnum(item);\r\n        }\r\n        this.printEnumIndex(enums);\r\n        for (const item of models) {\r\n          this.printModel(item);\r\n        }\r\n        this.printModelIndex(models);\r\n        for (const name in services) {\r\n          if (services[name]) {\r\n            this.printService(services[name], name);\r\n          }\r\n        }\r\n        this.printServiceIndex();\r\n        this.printModule();\r\n        this.printIndex();\r\n        resolve();\r\n      })\r\n      .catch((err)=>reject(err));\r\n    });\r\n\r\n  }\r\n  public printEnum(value: IParserEnum): void {\r\n    const compiled = this.enumCompiler.compile(value);\r\n    // this._logger.ok(path.resolve(this.out + '/models/enums/' + value.name + '.enum.ts'));\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/models/enums/' + paramCase(value.name) + '.enum.ts'), compiled);\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/models/enums/' + paramCase(value.name) + '.enum.ts');\r\n    }\r\n\r\n  }\r\n  public printModel(model: IParserModel): void {\r\n    const compiled = this.modelCompiler.compile(model);\r\n    /// this._logger.ok(path.resolve(this.out + '/models/' + model.name + '.model.ts'));\r\n\r\n    fs.writeFile(path.resolve(this.out + '/models/' + paramCase(model.name).replace(/^i-/ig, '') + '.model.ts'), compiled, (err) => {\r\n      if (err) {\r\n        this._logger.err('[ ERROR ] file: ' + this.out + '/models/' + paramCase(model.name).replace(/^i-/ig, '') + '.model.ts');\r\n        return;\r\n      }\r\n      this._logger.ok('[ OK    ] file: ' + this.out + '/models/' + paramCase(model.name).replace(/^i-/ig, '') + '.model.ts');\r\n    });\r\n\r\n  }\r\n  public printService(service: IParserService, name: string): void {\r\n    const compiled = this.serviceCompiler.compile(service, name);\r\n    if (compiled !== '') {\r\n      this._printedServices.push(name);\r\n      fs.writeFile(path.resolve(this.out + '/services/' + paramCase(name) + '.service.ts'), compiled, (err) => {\r\n        if (err) {\r\n          this._logger.err('[ ERROR ] file: ' + this.out + '/services/' + paramCase(name) + '.service.ts');\r\n          return;\r\n        }\r\n        this._logger.ok('[ OK    ] file: ' + this.out + '/services/' + paramCase(name) + '.service.ts');\r\n      });\r\n    }\r\n  }\r\n  public printModule(): void {\r\n    const compiled = this.moduleCompiler.compile(this._printedServices);\r\n    fs.writeFile(path.resolve(this.out + '/api.module.ts'), compiled, (err) => {\r\n      if (err) {\r\n        this._logger.err('[ ERROR ] file: ' + this.out + '/api.module.ts');\r\n        return;\r\n      }\r\n      this._logger.ok('[ OK    ] file: ' + this.out + '/api.module.ts');\r\n    });\r\n  }\r\n  public printIndex(): void {\r\n    const imports = `export * from './services';\r\nexport * from './models';\r\nexport { APIModule } from './api.module';\r\n`;\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/index.ts'), imports);\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/index.ts');\r\n    }\r\n  }\r\n  public printServiceIndex(): void {\r\n    const imports = [];\r\n    for (const item of this._printedServices) {\r\n      imports.push(`export { ${item}APIService, I${item}APIService } from './${paramCase(item)}.service';`);\r\n    }\r\n    imports.push('');\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/services/index.ts'), imports.join('\\r\\n'));\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/services/index.ts');\r\n    }\r\n  }\r\n  public printModelIndex(models: IParserModel[]): void {\r\n    const imports = [];\r\n    for (const item of models) {\r\n      imports.push(`export { ${item.name} } from './${paramCase(item.name).replace(/^i-/ig, '')}.model';`);\r\n    }\r\n    imports.push(`export * from './enums';`);\r\n    imports.push('');\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/models/index.ts'), imports.join('\\r\\n'));\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/models/index.ts');\r\n    }\r\n  }\r\n  public printEnumIndex(enums: IParserEnum[]): void {\r\n    const imports = [];\r\n    for (const item of enums) {\r\n      imports.push(`export {${item.name}} from './${paramCase(item.name)}.enum';`);\r\n    }\r\n    imports.push('');\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/models/enums/index.ts'), imports.join('\\r\\n'));\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/models/enums/index.ts');\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","\r\nimport { Parser } from \"./utils/parser\";\r\nimport { ISwaggerConfig } from \"./interfaces/swagger.interface\";\r\nimport { HelpCLI } from \"./utils/helpcli\";\r\nimport { IGeneratorConfig } from \"./interfaces/config\";\r\nimport * as fs from \"fs\";\r\nimport { Logger } from \"./utils/logger\";\r\nimport {\r\n  IParserEnum,\r\n  IParserModel,\r\n  IParserServiceList\r\n} from \"./interfaces/parser\";\r\nimport { TemplatePrinter } from \"./utils/template-printer\";\r\nimport fetch from \"node-fetch\";\r\n\r\nexport default class Generator {\r\n  public config: IGeneratorConfig;\r\n  public swagger: ISwaggerConfig | null = null;\r\n  private parser: Parser = new Parser();\r\n  private helper: HelpCLI = new HelpCLI();\r\n  private _logger: Logger = new Logger();\r\n  private _printer: TemplatePrinter = new TemplatePrinter();\r\n  constructor(config: IGeneratorConfig | null = null) {\r\n    if (config) {\r\n      this.config = config;\r\n    } else {\r\n      this.config = this.helper.parseArgs();\r\n    }\r\n\r\n    if (this.config.help) {\r\n      this.helper.printHelp();\r\n    } else {\r\n      if (this.config.config !== \"\" && this.config.out !== \"\") {\r\n        this.start();\r\n      } else {\r\n        this._logger.err(\"Params not set, see help and try again:\");\r\n        this.helper.printHelp();\r\n      }\r\n    }\r\n  }\r\n  public start() {\r\n    this.getConfig(this.config.config).then(\r\n      res => {\r\n        this._logger.info(\"<Parsing Processed...>\");\r\n        this._logger.ok(JSON.stringify(res));\r\n        this.parser.parse(res).then(\r\n          (res: [IParserEnum[], IParserModel[], IParserServiceList]) => {\r\n            this._logger.ok(\"[ SUCCESS ]: Swagger JSON Parsed Successfull!\");\r\n            this._logger.info(\"<Files Saving>\");\r\n            let extend = null;\r\n            try {\r\n              extend = JSON.parse(\r\n                fs.readFileSync(\"./sw2ngx-extend.json\", \"utf-8\")\r\n              );\r\n            } catch (e) {\r\n              this._logger.info(\"Not have extends\");\r\n            }\r\n            if (extend) {\r\n              if (extend.enums) {\r\n                res[0].push(...extend.enums);\r\n              }\r\n              if (extend.models) {\r\n                res[1].push(...extend.models);\r\n              }\r\n              if (extend.services) {\r\n                for (const key in extend.services) {\r\n                  if (extend.services[key]) {\r\n                    if (res[2][key]) {\r\n                      if (extend.services[key].imports) {\r\n                        res[2][key].imports.push(\r\n                          ...extend.services[key].imports\r\n                        );\r\n                      }\r\n                      if (extend.services[key].methods) {\r\n                        res[2][key].methods.push(\r\n                          ...extend.services[key].methods\r\n                        );\r\n                      }\r\n                    } else {\r\n                      res[2][key] = extend.services[key];\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            // fs.writeFileSync(path.resolve('./result.json'), JSON.stringify({\r\n            //     enums: res[0],\r\n            //     models: res[1],\r\n            //     services: res[2]\r\n            // }));\r\n            this._printer.print(res[0], res[1], res[2], this.config.out).then(\r\n              () => {\r\n                this._logger.ok(\r\n                  \"[ SUCCESS ]: Generation API Module Successfull!\"\r\n                );\r\n              },\r\n              reject => {\r\n                console.log(\"end here\");\r\n                this._logger.err(JSON.stringify(reject));\r\n              }\r\n            );\r\n          },\r\n          err => {\r\n            this._logger.err(JSON.stringify(err));\r\n          }\r\n        );\r\n        // this._logger.info('<Create Swagger Map Object>');\r\n      },\r\n      err => {\r\n        this._logger.err(JSON.stringify(err));\r\n      }\r\n    );\r\n  }\r\n\r\n  private getConfig(conf: string): Promise<any> {\r\n    const promise = new Promise<any>((resolve, reject) => {\r\n      if (/http(s?):\\/\\/\\S/gi.test(conf)) {\r\n        fetch(conf)\r\n          .then((res: any)=>{\r\n            resolve(res.json())\r\n          })\r\n          .catch((err: any)=>{\r\n            this._logger.err(err);\r\n            reject(err);\r\n          });\r\n      } else {\r\n        this.swagger = JSON.parse(fs.readFileSync(conf, \"utf-8\"));\r\n        resolve(this.swagger);\r\n      }\r\n    });\r\n\r\n    return promise;\r\n  }\r\n}\r\n","import Generator from \"./sw2ngx\";\r\n\r\nexport default Generator;\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst app = new Generator();"],"names":["resolve","fs.mkdirSync","path.resolve","fs.writeFileSync","fs.writeFile","fs.readFileSync"],"mappings":"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"}