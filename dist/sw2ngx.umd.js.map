{"version":3,"file":"sw2ngx.umd.js","sources":["../src/utils/logger.ts","../src/utils/simhash/jenkins.ts","../src/utils/simhash/simhash.ts","../src/utils/parser.ts","../src/interfaces/params.ts","../src/utils/helpcli.ts","../src/utils/templates/module.ts","../src/utils/templates/service.ts","../src/utils/templates/enum.ts","../src/utils/templates/model.ts","../node_modules/lower-case/lower-case.js","../node_modules/no-case/vendor/non-word-regexp.js","../node_modules/no-case/vendor/camel-case-regexp.js","../node_modules/no-case/vendor/camel-case-upper-regexp.js","../node_modules/no-case/no-case.js","../node_modules/dot-case/dot-case.js","../node_modules/upper-case/upper-case.js","../node_modules/swap-case/swap-case.js","../node_modules/path-case/path-case.js","../node_modules/camel-case/camel-case.js","../node_modules/snake-case/snake-case.js","../node_modules/title-case/title-case.js","../node_modules/param-case/param-case.js","../node_modules/header-case/header-case.js","../node_modules/upper-case-first/upper-case-first.js","../node_modules/pascal-case/pascal-case.js","../node_modules/constant-case/constant-case.js","../node_modules/sentence-case/sentence-case.js","../node_modules/is-upper-case/is-upper-case.js","../node_modules/is-lower-case/is-lower-case.js","../node_modules/lower-case-first/lower-case-first.js","../node_modules/change-case/change-case.js","../src/utils/template-printer.ts","../src/sw2ngx.ts","../src/index.ts"],"sourcesContent":["export interface IColor {\r\n    [key:string]: string\r\n}\r\nexport const COLORS_HLP = {\r\n    reset: \"\\x1b[0m\",\r\n    bright: \"\\x1b[1m\",\r\n    dim: \"\\x1b[2m\",\r\n    underscore: \"\\x1b[4m\",\r\n    blink: \"\\x1b[5m\",\r\n    reverse: \"\\x1b[7m\",\r\n    hidden: \"\\x1b[8m\"\r\n} as IColor;\r\n\r\nexport const COLORS_TXT = {\r\n    black: \"\\x1b[30m\",\r\n    red: \"\\x1b[31m\",\r\n    green: \"\\x1b[32m\",\r\n    yellow: \"\\x1b[33m\",\r\n    blue: \"\\x1b[34m\",\r\n    magenta: \"\\x1b[35m\",\r\n    cyan: \"\\x1b[36m\",\r\n    white: \"\\x1b[37m\"\r\n} as IColor;\r\n\r\nexport const COLORS_BG = {\r\n    black: \"\\x1b[40m\",\r\n    red: \"\\x1b[41m\",\r\n    green: \"\\x1b[42m\",\r\n    yellow: \"\\x1b[43m\",\r\n    blue: \"\\x1b[44m\",\r\n    magenta: \"\\x1b[45m\",\r\n    cyan: \"\\x1b[46m\",\r\n    white: \"\\x1b[47m\"\r\n} as IColor;\r\n\r\nexport class Logger {\r\n\r\n    public reset(): Logger {\r\n        process.stdout.write(COLORS_HLP.reset);\r\n        return this;\r\n    }\r\n    public bg(color: string):Logger {\r\n        process.stdout.write(COLORS_BG[color]);\r\n        return this;\r\n\r\n    }\r\n    public fg(color: string): Logger {\r\n        process.stdout.write(COLORS_TXT[color]);\r\n        return this;\r\n    }\r\n    public write(line: string): Logger {\r\n        process.stdout.write(line);\r\n        return this;\r\n    }\r\n    public writeln(line: string): Logger {\r\n        process.stdout.write(line);\r\n        process.stdout.write('\\r\\n');\r\n        return this;\r\n    }\r\n    public info(message: string) {\r\n        this.reset().writeln('').fg('blue').writeln(message).reset();\r\n    }\r\n    public err(message: string) {\r\n        this.reset().writeln('').fg('red').writeln(message).reset();\r\n    }\r\n    public ok(message: string) {\r\n        this.reset().writeln('').fg('green').writeln(message).reset();\r\n    }\r\n}","export class Jenkins {\r\n    public pc: number = 0;\r\n    public pb: number = 0;\r\n    constructor() {\r\n        /**\r\n         * Default first initial seed.\r\n         */\r\n        this.pc = 0;\r\n\r\n        /**\r\n         * Default second initial seed.\r\n         */\r\n        this.pb = 0;\r\n    }\r\n\r\n    // --------------------------------------------------\r\n    // Public access\r\n    // --------------------------------------------------\r\n\r\n    /**\r\n     * Computes and returns 32-bit hash of given message.\r\n     */\r\n    public hash32(msg: string) {\r\n        const h = this.lookup3(msg, this.pc, this.pb);\r\n        return (h.c).toString(16);\r\n    }\r\n\r\n    /**\r\n     * Computes and returns 32-bit hash of given message.\r\n     */\r\n    public hash64(msg: string) {\r\n        const h = this.lookup3(msg, this.pc, this.pb);\r\n        return (h.b).toString(16) + (h.c).toString(16);\r\n    }\r\n    private lookup3(k: string, pc: number, pb: number) {\r\n        let length = k.length;\r\n        let a;\r\n        let b;\r\n        let c;\r\n\r\n        a = b = c = 0xdeadbeef + length + pc;\r\n        c += pb;\r\n\r\n        let offset = 0;\r\n        let mixed;\r\n        while (length > 12) {\r\n            a += k.charCodeAt(offset + 0);\r\n            a += k.charCodeAt(offset + 1) << 8;\r\n            a += k.charCodeAt(offset + 2) << 16;\r\n            a += k.charCodeAt(offset + 3) << 24;\r\n\r\n            b += k.charCodeAt(offset + 4);\r\n            b += k.charCodeAt(offset + 5) << 8;\r\n            b += k.charCodeAt(offset + 6) << 16;\r\n            b += k.charCodeAt(offset + 7) << 24;\r\n\r\n            c += k.charCodeAt(offset + 8);\r\n            c += k.charCodeAt(offset + 9) << 8;\r\n            c += k.charCodeAt(offset + 10) << 16;\r\n            c += k.charCodeAt(offset + 11) << 24;\r\n\r\n            mixed = this.mix(a, b, c);\r\n            a = mixed.a;\r\n            b = mixed.b;\r\n            c = mixed.c;\r\n\r\n            length -= 12;\r\n            offset += 12;\r\n        }\r\n\r\n        switch (length) {\r\n            case 12:\r\n                c += k.charCodeAt(offset + 11) << 24;\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 11:\r\n                c += k.charCodeAt(offset + 10) << 16;\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 10:\r\n                c += k.charCodeAt(offset + 9) << 8;\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 9:\r\n                c += k.charCodeAt(offset + 8);\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 8:\r\n                b += k.charCodeAt(offset + 7) << 24;\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 7:\r\n                b += k.charCodeAt(offset + 6) << 16;\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 6:\r\n                b += k.charCodeAt(offset + 5) << 8;\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 5:\r\n                b += k.charCodeAt(offset + 4);\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 4:\r\n                a += k.charCodeAt(offset + 3) << 24;\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 3:\r\n                a += k.charCodeAt(offset + 2) << 16;\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 2:\r\n                a += k.charCodeAt(offset + 1) << 8;\r\n            // tslint:disable-next-line:no-switch-case-fall-through\r\n            case 1:\r\n                a += k.charCodeAt(offset + 0);\r\n                break;\r\n\r\n            case 0:\r\n                return { c: c >>> 0, b: b >>> 0 };\r\n        }\r\n\r\n        // Final mixing of three 32-bit values in to c\r\n        mixed = this.finalMix(a, b, c)\r\n        a = mixed.a;\r\n        b = mixed.b;\r\n        c = mixed.c;\r\n\r\n        return { c: c >>> 0, b: b >>> 0 };\r\n    }\r\n\r\n    /**\r\n     * Mixes 3 32-bit integers reversibly but fast.\r\n     */\r\n    private mix(a: number, b: number, c: number) {\r\n        a -= c;\r\n        a ^= this.rot(c, 4);\r\n        c += b;\r\n        b -= a;\r\n        b ^= this.rot(a, 6);\r\n        a += c;\r\n        c -= b;\r\n        c ^= this.rot(b, 8);\r\n        b += a;\r\n        a -= c;\r\n        a ^= this.rot(c, 16);\r\n        c += b;\r\n        b -= a;\r\n        b ^= this.rot(a, 19);\r\n        a += c;\r\n        c -= b;\r\n        c ^= this.rot(b, 4);\r\n        b += a;\r\n        return { a: a, b: b, c: c };\r\n    }\r\n\r\n    /**\r\n     * Final mixing of 3 32-bit values (a,b,c) into c\r\n     */\r\n    private finalMix(a:number, b: number, c: number) {\r\n        c ^= b;\r\n        c -= this.rot(b, 14);\r\n        a ^= c;\r\n        a -= this.rot(c, 11);\r\n        b ^= a;\r\n        b -= this.rot(a, 25);\r\n        c ^= b;\r\n        c -= this.rot(b, 16);\r\n        a ^= c;\r\n        a -= this.rot(c, 4);\r\n        b ^= a;\r\n        b -= this.rot(a, 14);\r\n        c ^= b;\r\n        c -= this.rot(b, 24);\r\n        return { a: a, b: b, c: c };\r\n    }\r\n    /**\r\n     * Rotate x by k distance.\r\n     */\r\n    private rot(x: number, k: number) {\r\n        return (((x) << (k)) | ((x) >> (32 - (k))));\r\n    }\r\n\r\n}\r\n\r\n\r\n// --------------------------------------------------\r\n// Private methods\r\n// --------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Jenkins} from './jenkins';\r\n\r\nexport interface ISimHashOptions {\r\n    kshingles?: number;\r\n    maxFeatures?: number;\r\n}\r\n\r\nexport class SimHash {\r\n    public kshingles: number = 4;\r\n    public maxFeatures: number = 128;\r\n    constructor(options?: ISimHashOptions) {\r\n        if (options) {\r\n            /**\r\n             * By default, we tokenize input into chunks of this size.\r\n             */\r\n            if (options.kshingles) {\r\n                this.kshingles = options.kshingles;\r\n            }\r\n            /**\r\n             * By default, this many number of minimum shingles will \r\n             * be combined to create the final hash.\r\n             */\r\n            if (options.maxFeatures) {\r\n                this.maxFeatures = options.maxFeatures;\r\n            }\r\n        }\r\n    }\r\n\r\n    // --------------------------------------------------\r\n    // Public access\r\n    // --------------------------------------------------\r\n\r\n    /**\r\n     * Driver function.\r\n     */\r\n    public hash(input: string) {\r\n        const tokens = this.tokenize(input);\r\n        const shingles = [];\r\n        const jenkins = new Jenkins();\r\n        for (let i in tokens) {\r\n            shingles.push(jenkins.hash32(tokens[i]));\r\n        }\r\n        let simhash = this.combineShingles(shingles);\r\n        simhash >>>= 0;\r\n        return simhash;\r\n    };\r\n    /**\r\n     * Tokenizes input into 'kshingles' number of tokens.\r\n     */\r\n    private tokenize(original: string) {\r\n        const size = original.length;\r\n        if (size <= this.kshingles) {\r\n            return [original.substr(0)];\r\n        }\r\n\r\n        const shingles = [];\r\n        for (let i = 0; i < size; i = i + this.kshingles) {\r\n            shingles.push(i + this.kshingles < size ? original.slice(i, i + this.kshingles) : original.slice(i));\r\n        }\r\n        return shingles;\r\n    };\r\n\r\n    private combineShingles(shingles: any[]) {\r\n        if (shingles.length === 0) return;\r\n\r\n        if (shingles.length === 1) return shingles[0];\r\n\r\n        shingles.sort(this.hashComparator);\r\n        if (shingles.length > this.maxFeatures) shingles = shingles.splice(this.maxFeatures);\r\n\r\n        let simhash = 0x0;\r\n        let mask = 0x1;\r\n        for (let pos = 0; pos < 32; pos++) {\r\n            let weight = 0;\r\n            for (let i in shingles) {\r\n                let shingle = parseInt(shingles[i], 16);\r\n                weight += !(~shingle & mask) === true ? 1 : -1;\r\n            }\r\n            if (weight > 0) simhash |= mask;\r\n            mask <<= 1;\r\n        }\r\n\r\n        return simhash;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Calculates binary hamming distance of two base 16 integers.\r\n     */\r\n    private hammingDistanceSlow(x: string, y: string) {\r\n        let distance = 0;\r\n        let val = parseInt(x, 16) ^ parseInt(y, 16);\r\n        while (val) {\r\n            ++distance;\r\n            val &= val - 1;\r\n        }\r\n        return distance;\r\n    };\r\n\r\n    /**\r\n     * TODO: Use a priority queue. Till then this comparator is \r\n     * used to find the least 'maxFeatures' shingles.\r\n     */\r\n    public hashComparator(a: number, b: number) {\r\n        return a < b ? -1 : (a > b ? 1 : 0);\r\n    };\r\n};\r\n\r\n\r\n\r\n","import { ISwaggerConfig, ISwaggerProperty, ISwaggerParam } from './../interfaces/swagger.interface';\r\nimport { Logger } from './logger';\r\nimport { IParserModel, IParserEnum, IParserService, IParserResolvedType, IParserServiceList, IParserParam } from '../interfaces/parser';\r\nimport { SimHash } from './simhash/simhash';\r\n\r\nexport class Parser {\r\n    private _enums: IParserEnum[] = [];\r\n    private _models: IParserModel[] = [];\r\n    private _servicesList: IParserServiceList = {};\r\n    private _logger: Logger = new Logger();\r\n    private _simHash: SimHash = new SimHash();\r\n\r\n    public parse(config: ISwaggerConfig): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._logger.info('start parsing');\r\n            this.parseModels(config).then((res) => {\r\n                this._logger.info('models parsed');\r\n                this.parseServices(config).then((res) => {\r\n                    this._logger.info('services parsed');\r\n                    resolve([this._enums, this._models, this._servicesList]);\r\n                }, (err) => {\r\n                    this._logger.info('services error');\r\n                    this.handleError(JSON.stringify(err));\r\n                    reject(err);\r\n                })\r\n            }, (err) => {\r\n                this._logger.err('[ ERROR ]: Parsing enums error!');\r\n                this.handleError(JSON.stringify(err));\r\n                reject(err);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    public parseModels(config: ISwaggerConfig): Promise<[IParserEnum[], IParserModel[]]> {\r\n        const models = config.definitions;\r\n        return new Promise<[IParserEnum[], IParserModel[]]>((resolve, reject) => {\r\n            for (const key in models) {\r\n                const model = {\r\n                    name: '',\r\n                    description: '',\r\n                    imports: [],\r\n                    props: []\r\n                } as IParserModel;\r\n                if (models.hasOwnProperty(key)) {\r\n                    const imports = [];\r\n                    model.name = key;\r\n                    model.description = models[key].description;\r\n                    for (const prop in models[key].properties) {\r\n                        if (models[key].properties.hasOwnProperty(prop)) {\r\n                            const temp = this.parseModelProp(prop, models[key].properties[prop], model.name);\r\n                            imports.push(temp.imports);\r\n                            model.props.push(temp);\r\n                        }\r\n                    }\r\n                    model.imports = this.resolveImports(imports);\r\n                }\r\n                this._models.push(model);\r\n            }\r\n            resolve([this._enums, this._models]);\r\n        });\r\n    }\r\n\r\n    public parseTags(tags: string[]) {\r\n        if (tags.length >= 1) {\r\n            return tags[0];\r\n        } else {\r\n            return '__common'\r\n        }\r\n    }\r\n\r\n    public parseServices(config: ISwaggerConfig): Promise<IParserServiceList> {\r\n        return new Promise<IParserServiceList>((resolve, reject) => {\r\n            let result: IParserServiceList = {\r\n                __common: {\r\n                    uri: config.basePath,\r\n                    imports: [],\r\n                    methods: []\r\n                }\r\n            };\r\n            for (let path in config.paths) {\r\n                if (config.paths.hasOwnProperty(path)) {\r\n                    for (let method in config.paths[path]) {\r\n                        if (config.paths[path].hasOwnProperty(method)) {\r\n                            this._logger.ok(path);\r\n                            let parsedMethod = this.parseMethod(path, method, config.paths[path][method]);\r\n                            if (result.hasOwnProperty(parsedMethod.tag)) {\r\n                                result[parsedMethod.tag].methods.push(parsedMethod);\r\n                            } else {\r\n                                result[parsedMethod.tag] = {\r\n                                    uri: config.basePath,\r\n                                    imports: [],\r\n                                    methods: [parsedMethod]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this._servicesList = this.resolveServiceImports(result);\r\n            resolve(this._servicesList);\r\n        });\r\n    }\r\n\r\n    public parseMethod(uri: string, type: string, method: any) {\r\n\r\n        try {\r\n            const tag = this.parseParams(method.parameters, method.operationId);\r\n        } catch (e) {\r\n            console.error('params');\r\n        }\r\n\r\n        const tag = this.parseTags(method.tags);\r\n        const params = this.parseParams(method.parameters, method.operationId);\r\n        const resp = this.parseResponse(method.responses, method.operationId);\r\n        return {\r\n            uri: uri.replace(/\\{/ig, '${'),\r\n            type: type,\r\n            tag: tag,\r\n            name: method.operationId,\r\n            description: method.summary,\r\n            params: params,\r\n            resp: resp\r\n        }\r\n    }\r\n\r\n    public resolveServiceImports(servicesList: IParserServiceList) {\r\n        for (let serv in servicesList) {\r\n            if (servicesList.hasOwnProperty(serv)) {\r\n                let imports = [];\r\n                for (let method of servicesList[serv].methods) {\r\n                    if (method.resp.length > 0) {\r\n                        for (let item of method.resp) {\r\n                            imports.push(item.typeImport);\r\n                        }\r\n                    }\r\n                    for (let param of method.params.all) {\r\n                        if (param.type.typeImport) {\r\n                            imports.push(param.type.typeImport);\r\n                        }\r\n                    }\r\n                }\r\n                servicesList[serv].imports = this.resolveImports(imports);\r\n            }\r\n        }\r\n        return servicesList;\r\n    }\r\n\r\n    public get models(): IParserModel[] {\r\n        return this._models;\r\n    }\r\n\r\n    public get enums(): IParserEnum[] {\r\n        return this._enums;\r\n    }\r\n\r\n    public get services(): IParserServiceList {\r\n        return this._servicesList;\r\n    }\r\n\r\n    public parseParams(params: ISwaggerParam[], method: string) {\r\n        const parsed = {\r\n            all: [],\r\n            uri: [],\r\n            query: [],\r\n            payload: [],\r\n            form: [],\r\n            urlencoded:[]\r\n        } as {\r\n                [key: string]: IParserParam[]\r\n            };\r\n        for (const param in params) {\r\n            if (params.hasOwnProperty(param)) {\r\n                let type = null;\r\n                this._logger.info(JSON.stringify(params[param]));\r\n                const paramName = this.resolveParamName(params[param].name);\r\n                this._logger.info(paramName);\r\n                if (params[param].schema) {\r\n                    this._logger.ok('type1');\r\n                    type = this.resolveType(params[param].schema as ISwaggerProperty, paramName, method);\r\n                } else {\r\n                    this._logger.ok('type2');\r\n                    type = this.resolveType(params[param] as ISwaggerProperty, paramName, method);\r\n                }\r\n\r\n\r\n                let res = {\r\n                    name: this.clearName(params[param].name),\r\n                    queryName: paramName,\r\n                    description: params[param].description ? params[param].description : '',\r\n                    required: params[param].required ? true : false,\r\n                    type: type\r\n                } as IParserParam;\r\n\r\n                if (params[param].in === 'path') {\r\n                    parsed.uri.push(res);\r\n                }\r\n                if (params[param].in === 'query') {\r\n                    parsed.query.push(res);\r\n                }\r\n                if (params[param].in === 'body') {\r\n                    parsed.payload.push(res);\r\n                }\r\n                if (params[param].in === 'formData') {\r\n                    parsed.form.push(res);\r\n                }\r\n                parsed.all.push(res);\r\n            }\r\n        }\r\n        return parsed;\r\n    }\r\n\r\n    public clearName(name: string): string {\r\n        const baseTypes = [\r\n            'number', 'string', 'boolean', 'any', 'array'\r\n        ];\r\n        let result = name.replace(/\\.|\\-/ig, '');\r\n        if (baseTypes.indexOf(result) !== -1) {\r\n            result = result + 'Param';\r\n        }\r\n        return result;\r\n    }\r\n    public resolveParamName(name: string): string {\r\n        this._logger.ok(name);\r\n        let temp = name.split('.');\r\n        if (temp.length > 1) {\r\n            let result = temp.pop() as string;\r\n            console.log(result);\r\n            let tmpResult = result.split('');\r\n            tmpResult[0] = tmpResult[0].toUpperCase();\r\n            return tmpResult.join('');\r\n        }\r\n        return temp.pop() as any;\r\n    }\r\n\r\n    public parseResponse(responses: any, method: string): IParserResolvedType[] {\r\n        if (responses['200']) {\r\n            if (responses['200']['schema']) {\r\n                let resolvedType: IParserResolvedType = { typeName: '', typeImport: '' } as IParserResolvedType;\r\n                if (responses['200']['schema']['enum']) {\r\n                    resolvedType.typeName = 'number';\r\n                } else {\r\n                    resolvedType = this.resolveType(responses['200']['schema'], 'response', method);\r\n                }\r\n                if (resolvedType.typeName === '') {\r\n                    return [{\r\n                        typeName: 'any',\r\n                        typeImport: null\r\n                    }];\r\n                } else {\r\n                    if (resolvedType.typeImport !== '') {\r\n                        return [resolvedType];\r\n                    } else {\r\n                        return [{\r\n                            typeName: resolvedType.typeName,\r\n                            typeImport: null\r\n                        }];\r\n                    }\r\n                }\r\n            } else {\r\n                return [{\r\n                    typeName: 'any',\r\n                    typeImport: null\r\n                }];\r\n            }\r\n        } else {\r\n            return [{\r\n                typeName: 'any',\r\n                typeImport: null\r\n            }];\r\n        }\r\n    }\r\n\r\n    public resolveImports(imports: any[]): any[] {\r\n        const result = [];\r\n        for (const imp of imports) {\r\n            if (result.indexOf(imp) === -1) {\r\n                if (imp !== null) {\r\n                    result.push(imp);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public parseModelProp(name: string, prop: ISwaggerProperty, modelName: string) {\r\n        const resolvedType = this.resolveType(prop, name, modelName);\r\n        return {\r\n            name: name,\r\n            type: resolvedType.typeName,\r\n            imports: resolvedType.typeImport,\r\n            description: prop.description !== '' ? prop.description : ''\r\n        }\r\n    }\r\n\r\n    public resolveType(prop: ISwaggerProperty, name: string, parent: string): IParserResolvedType {\r\n        let curname = name.replace(/\\.|\\-/ig, '_');\r\n        if (prop === undefined) {\r\n            return {\r\n                typeName: 'any',\r\n                typeImport: null\r\n            };\r\n        }\r\n        if ((!prop.enum) && (!prop.format)) {\r\n            if (prop.$ref !== undefined) {\r\n                const temp = prop.$ref.split('/');\r\n                return {\r\n                    typeName: temp[temp.length - 1],\r\n                    typeImport: temp[temp.length - 1]\r\n                };\r\n            }\r\n            if ((prop.type === 'boolean') ||\r\n                (prop.type === 'string') ||\r\n                (prop.type === 'number')) {\r\n                return {\r\n                    typeName: prop.type,\r\n                    typeImport: null\r\n                };\r\n            }\r\n            if (prop.type === 'array') {\r\n                if (prop.items) {\r\n                    const temp = this.resolveType(prop.items, curname, parent);\r\n                    return {\r\n                        typeName: temp.typeName + \"[]\",\r\n                        typeImport: temp.typeImport\r\n                    };\r\n                }\r\n\r\n            }\r\n            if (prop.type === 'object') {\r\n                return {\r\n                    typeName: 'any',\r\n                    typeImport: null\r\n                };\r\n            }\r\n        } else {\r\n            if (prop.enum !== undefined) {\r\n                return this.resolveEnums(prop.description, prop.enum, name, parent);\r\n            }\r\n            if (prop.format) {\r\n                const result = { typeName: '', typeImport: null };\r\n                switch (prop.format) {\r\n                    case 'date-time':\r\n                    case 'date':\r\n                        result.typeName = 'string';\r\n                        break;\r\n                    case 'int32':\r\n                    case 'integer':\r\n                    case 'float':\r\n                    case 'double':\r\n                    case 'int64':\r\n                        result.typeName = 'number';\r\n                        break;\r\n                    case 'password':\r\n                        result.typeName = 'string';\r\n                        break;\r\n                    default:\r\n                        result.typeName = 'any';\r\n                        break;\r\n                }\r\n                return result;\r\n            }\r\n\r\n        }\r\n        return {\r\n            typeName: 'any',\r\n            typeImport: null\r\n        };\r\n    }\r\n\r\n    public handleError(e: any) {\r\n        this._logger.reset().fg('red').writeln(e).reset();\r\n    }\r\n\r\n    public resolveEnums(description: string, evalue: number[], curname: string, parent: string): IParserResolvedType {\r\n        const hashName = this._simHash.hash(`${parent}_${curname}Set`);\r\n        // this._logger.ok(`${parent}_${curname}Set: ${hashName.toString(16)}`);\r\n        // this._logger.err(hashName);\r\n        const extact = this.extractEnums(description ? description : '', evalue, curname);\r\n        //  this._logger.err(JSON.stringify({description, evalue, curname, parent}))\r\n        const propEnum: IParserEnum = {\r\n            name: `${parent}_${curname}Set`,\r\n            modelName: parent,\r\n            value: extact,\r\n            hash: hashName.toString(16)\r\n        };\r\n        for(const item of this._enums){\r\n            if(item.hash === propEnum.hash){\r\n                return {\r\n                    typeName: propEnum.name,\r\n                    typeImport: propEnum.name\r\n                }\r\n            }\r\n        }\r\n        this._enums.push(propEnum);\r\n        return {\r\n            typeName: propEnum.name,\r\n            typeImport: propEnum.name\r\n        }\r\n    }\r\n\r\n    public extractEnums(description: string, propEnum: number[], name: string = 'enum') {\r\n        const result = [];\r\n        let indexOf = description.search(/\\(\\d/ig);\r\n        if (indexOf !== -1) {\r\n            description = description.substr(indexOf + 1).replace(')', '');\r\n            let temp = description.split(',');\r\n            for (let tmp of temp) {\r\n                ;\r\n                let key = tmp.split('=');\r\n                result.push({\r\n                    key: key[1],\r\n                    val: parseInt(key[0], 10)\r\n                });\r\n            }\r\n        } else {\r\n            for (const key in propEnum) {\r\n                if (propEnum.hasOwnProperty(key)) {\r\n                    result.push({\r\n                        key: name + propEnum[key],\r\n                        val: propEnum[key]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","export const GeneratorParams: IGeneratorParam[] = [\r\n    {\r\n        name: 'config',\r\n        keys: ['-c', '--c'],\r\n        noValue: false,\r\n        description: 'Swagger doc path'\r\n    },\r\n    {\r\n        name: 'out',\r\n        keys: ['-o', '--o'],\r\n        noValue: false,\r\n        description: 'Output directory'\r\n    },\r\n    {\r\n        name: 'help',\r\n        keys: [\r\n            '-h', '--h', 'help', '-help'\r\n        ],\r\n        noValue: true,\r\n        description: 'Call help'\r\n    }\r\n];\r\n\r\nexport interface IGeneratorParam {\r\n    name: string;\r\n    keys: string[];\r\n    noValue: boolean;\r\n    description: string;\r\n}","\r\nimport { Logger } from \"./logger\";\r\nimport { GeneratorParams } from \"../interfaces/params\";\r\nimport { IGeneratorConfig } from \"../interfaces/config\";\r\n\r\nexport class HelpCLI {\r\n    public logger: Logger  = new Logger();\r\n    public parseArgs(): IGeneratorConfig {\r\n        let params: IGeneratorConfig = {\r\n            config: '',\r\n            out: '',\r\n            help: false\r\n        };\r\n        const args = process.argv;\r\n        for (let i = 0; i < args.length; i++) {\r\n            for (const param of GeneratorParams) {\r\n                if (param.keys.indexOf(args[i]) !== -1) {\r\n                    if (param.noValue) {\r\n                        params[param.name] = true;\r\n                        break;\r\n                    } else {\r\n                        params[param.name] = args[i + 1];\r\n                        i++;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return params;\r\n    }\r\n    public printHelp() {\r\n        this.logger\r\n            .fg('green')\r\n            .writeln('')\r\n            .write('[HELP]')\r\n            .write(':')\r\n            .writeln('')\r\n            .reset()\r\n            .writeln('');\r\n        for (const key of GeneratorParams) {\r\n            let line = `     ${key.name}          `;\r\n            line = line.substr(0, 15);\r\n            let args = new Array(40).fill(' ');\r\n            let i = 1;\r\n            for (const arg of key.keys) {\r\n                args[i + 2] = arg;\r\n                i = i + 2;\r\n            }\r\n            this.logger.write(line)\r\n                .fg('yellow');\r\n            line = args.join('');\r\n            line = line.substr(0, 20);\r\n            this.logger.write(line)\r\n                .reset();\r\n            line = '     ' + key.description;\r\n            this.logger.write(line);\r\n            this.logger.writeln('');\r\n        }\r\n    }\r\n}\r\n","export class ModuleTemplate {\r\n\r\n  public compile(value: string[]) {\r\n    const servicesList: string[] = [];\r\n    for (const el of value) {\r\n      servicesList.push(`${el}APIService,`);\r\n    }\r\n    const importsHead: string = servicesList.join('\\r\\n\\t');\r\n    const importsBody: string = servicesList.join('\\r\\n\\t\\t\\t\\t');\r\n    return `\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport {\r\n  ${importsHead}\r\n} from './services';\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule\r\n  ],\r\n  exports: [],\r\n  declarations: [],\r\n  providers: [\r\n  ],\r\n})\r\nexport class APIModule {\r\n  public static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: APIModule,\r\n      providers: [\r\n        ${importsBody}\r\n      ],\r\n    };\r\n  }\r\n}\r\n`;\r\n  }\r\n}","import { IParserService, IParserMethod } from './../../interfaces/parser';\r\nexport class ServiceTemplate {\r\n  public imports(imp: string[]): string {\r\n    const imports = [];\r\n    if (imp.length === 0) {\r\n      return '';\r\n    }\r\n    imports.push(`import {`);\r\n    for (const item of imp) {\r\n      imports.push(`${item},`);\r\n    }\r\n    imports.push(`} from '../models';`);\r\n    return imports.join('\\r\\n');\r\n  }\r\n\r\n  public methodDescription(method: IParserMethod): string {\r\n    const temp = [];\r\n    temp.push(`\r\n    /**\r\n     * @method\r\n     * @name  ${method.name}\r\n     * @description${method.description ? method.description.replace('\\r\\n', '') : ''}\\r\\n`\r\n    );\r\n    for (const param of method.params.all) {\r\n      temp.push(`     * @param {${param.type.typeName}} ${param.name}\\r\\n`);\r\n    }\r\n    temp.push(`     */`);\r\n    return temp.join('');\r\n\r\n  }\r\n\r\n  public methodParams(method: IParserMethod, isInterface: boolean): string {\r\n    const temp = [];\r\n    for (const param of method.params.all) {\r\n      if (!isInterface) {\r\n        if (param.default) {\r\n          temp.push(`${param.name}: ${param.type.typeName} = '${param.default}'`);\r\n        } else {\r\n          temp.push(`${param.name}: ${param.type.typeName}` + (param.required ? '' : ' = null'));\r\n        }\r\n      } else {\r\n        temp.push(`${param.name}${param.required ? '' : '?'}: ${param.type.typeName}`);\r\n      }\r\n    }\r\n    return temp.join(', ');\r\n  }\r\n\r\n  public methodBody(method: IParserMethod) {\r\n    const temp = [];\r\n    if (method.params.query.length > 0) {\r\n      temp.push(`\r\n        let paramString = '';`);\r\n      let isFirst = true;\r\n      for (const param of method.params.query) {\r\n        temp.push(`\r\n        if ((${param.name} !== undefined) && (${param.name} !== null)) {\r\n            paramString += '${isFirst ? '' : '&'}${param.queryName}=' + encodeURIComponent(${param.name}${param.type.typeName === 'Date' ? '.toISOString()' : '.toString()'});\r\n        }${param.required ? \" else { throw new Error('Required param(\" + param.name + \") not set!'); }\" : ''}`);\r\n        isFirst = false;\r\n      }\r\n      temp.push(`\r\n        options.params = new HttpParams({fromString: paramString});`);\r\n    }\r\n\r\n    if ((method.type === 'post') || (method.type === 'put')) {\r\n\r\n      if (method.params.form.length !== 0) {\r\n        temp.push(`\r\n        options.headers = new HttpHeaders();\r\n        options.headers.delete('Content-Type');\r\n        const form = new FormData();`);\r\n        for (let param of method.params.form) {\r\n          if (param.type.typeName === 'any') {\r\n            temp.push(`\r\n        form.append('${param.queryName}', ${param.name});`);\r\n          } else {\r\n            temp.push(`\r\n        form.append('${param.queryName}', JSON.stringify(${param.name}));`);\r\n          }\r\n        }\r\n        temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`, form, options);`);\r\n      } else {\r\n        if (method.params.urlencoded.length !== 0) {\r\n          temp.push(`\r\n        let payload = '';\r\n        options.headers = new HttpHeaders({'Content-Type': 'application/x-www-form-urlencoded'});`);\r\n          let isFirst = true;\r\n          for (const param of method.params.urlencoded) {\r\n            temp.push(`\r\n        if ((${param.name} !== undefined) && (${param.name} !== null)) {\r\n            payload += '${isFirst ? '' : '&'}${param.queryName}=' + encodeURIComponent(${param.name}${param.type.typeName === 'Date' ? '.toISOString()' : '.toString()'});\r\n        }${param.required ? \" else { throw new Error('Required param(\" + param.name + \") not set!'); }\" : ''}`);\r\n            isFirst = false;\r\n          }\r\n          temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`, payload, options);`);\r\n        } else {\r\n          temp.push(`\r\n        // tslint:disable-next-line:prefer-const\r\n        let payload = {};\r\n        options.headers = new HttpHeaders({'Content-Type': 'application/json; charset=utf-8'});`);\r\n          if (method.params.payload.length > 1) {\r\n            for (let param of method.params.payload) {\r\n              temp.push(`\r\n        payload['${param.queryName}'] = ${param.name};`);\r\n            }\r\n          } else {\r\n            if (method.params.payload.length > 0) {\r\n              temp.push(`\r\n        payload = ${method.params.payload[0].name};`);\r\n            }\r\n          }\r\n          temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`, JSON.stringify(payload), options);`);\r\n        }\r\n      }\r\n    }\r\n\r\n    if ((method.type === 'get') || (method.type === 'delete')) {\r\n      temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`${method.params.query.length !== 0 ? ', options' : ''});`);\r\n    }\r\n\r\n    return temp.join('\\r\\n');\r\n  }\r\n  public body(methods: IParserMethod[]) {\r\n    const interBody: string[] = [];\r\n    const serviceBody: string[] = [];\r\n    for (const method of methods) {\r\n      interBody.push(`${this.methodDescription(method)}\r\n    ${method.name}(${this.methodParams(method, true)}): Observable<${method.resp[0].typeName}>;`);\r\n      serviceBody.push(`\\tpublic ${method.name}(${this.methodParams(method, false)}): Observable<${method.resp[0].typeName}> {\r\n        const options = {\r\n            headers: new HttpHeaders(),\r\n            params: new HttpParams()\r\n        };\r\n${this.methodBody(method)}\r\n    }`);\r\n    }\r\n    return { interfaceBody: interBody.join('\\r\\n'), serviceBody: serviceBody.join('\\r\\n') }\r\n  }\r\n  public compile(value: IParserService, name: string): string {\r\n    if (value.methods.length > 0) {\r\n      const imports: string = this.imports(value.imports);\r\n      const { interfaceBody, serviceBody } = this.body(value.methods);\r\n      return `import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\n${imports}\r\nexport interface I${name}APIService {\r\n${interfaceBody}\r\n}\r\n\r\n@Injectable()\r\nexport class ${name}APIService implements I${name}APIService {\r\n  public serviceName: string;\r\n  public uri: string;\r\n  constructor(\r\n    public http: HttpClient) {\r\n    this.serviceName = '${name}API';\r\n    this.uri = '${value.uri}';\r\n  }\r\n${serviceBody}\r\n}\\r\\n`;\r\n    } else {\r\n      return '';\r\n    }\r\n\r\n  }\r\n}","import { IParserEnum } from './../../interfaces/parser';\r\nexport class EnumTemplate {\r\n  public body(value: IParserEnum): string {\r\n    const temp: string[] = [];\r\n    for (const param of value.value) {\r\n      temp.push(`${param.key}= ${parseInt(param.val.toString(), 10).toString() !== 'NaN' ? param.val : '\"' + param.val + '\"'}`);\r\n    }\r\n    return temp.join(',\\r\\n\\t');\r\n  }\r\n  public compile(value: IParserEnum) {\r\n    return `\r\nexport enum ${value.name} {\r\n  ${this.body(value)}\r\n}\r\n`;\r\n  }\r\n}","import { IParserModel } from './../../interfaces/parser';\r\nexport class ModelTemplate {\r\n\r\n  public modelImports(modelImports: string[], name: string) {\r\n    const imports = [];\r\n    if (modelImports.length === 0) { return ''; }\r\n    imports.push(`import {`);\r\n    for (const item of modelImports) {\r\n      if (item !== name) {\r\n        imports.push(`${item},`);\r\n      }\r\n    }\r\n    imports.push(`} from './';`);\r\n    return imports.join('\\r\\n');\r\n\r\n  }\r\n\r\n  public body(value: any): { [key: string]: string } {\r\n    const itemp: string[] = []\r\n    const temp: string[] = [];\r\n    for (const param of value) {\r\n      if (param.description) {\r\n        itemp.push(`/* ${param.description} */`);\r\n      }\r\n      itemp.push(`${param.name} : ${param.type};`);\r\n      temp.push(`public ${param.name}: ${param.type};`);\r\n    }\r\n    return {\r\n      iprop: itemp.join('\\r\\n\\t'),\r\n      prop: temp.join('\\r\\n\\t')\r\n    }\r\n  }\r\n  public compile(value: IParserModel) {\r\n    const { iprop, prop } = this.body(value.props);\r\n    return `\r\n${this.modelImports(value.imports, value.name)}\r\n\r\nexport interface I${value.name} {\r\n  ${iprop}\r\n}\r\n\r\nexport class ${value.name} implements I${value.name} {\r\n  ${prop}\r\n}\r\n`;\r\n  }\r\n}\r\n","/**\n * Special language-specific overrides.\n *\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n *\n * @type {Object}\n */\nvar LANGUAGES = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      '\\u0130': '\\u0069',\n      '\\u0049': '\\u0131',\n      '\\u0049\\u0307': '\\u0069'\n    }\n  },\n  az: {\n    regexp: /[\\u0130]/g,\n    map: {\n      '\\u0130': '\\u0069',\n      '\\u0049': '\\u0131',\n      '\\u0049\\u0307': '\\u0069'\n    }\n  },\n  lt: {\n    regexp: /[\\u0049\\u004A\\u012E\\u00CC\\u00CD\\u0128]/g,\n    map: {\n      '\\u0049': '\\u0069\\u0307',\n      '\\u004A': '\\u006A\\u0307',\n      '\\u012E': '\\u012F\\u0307',\n      '\\u00CC': '\\u0069\\u0307\\u0300',\n      '\\u00CD': '\\u0069\\u0307\\u0301',\n      '\\u0128': '\\u0069\\u0307\\u0303'\n    }\n  }\n}\n\n/**\n * Lowercase a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  var lang = LANGUAGES[locale]\n\n  str = str == null ? '' : String(str)\n\n  if (lang) {\n    str = str.replace(lang.regexp, function (m) { return lang.map[m] })\n  }\n\n  return str.toLowerCase()\n}\n","module.exports = /[^A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]+/g\n","module.exports = /([a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19])([A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A])/g\n","module.exports = /([A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A])([A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A][a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A])/g\n","var lowerCase = require('lower-case')\n\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp')\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp')\nvar CAMEL_CASE_UPPER_REGEXP = require('./vendor/camel-case-upper-regexp')\n\n/**\n * Sentence case a string.\n *\n * @param  {string} str\n * @param  {string} locale\n * @param  {string} replacement\n * @return {string}\n */\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return ''\n  }\n\n  replacement = typeof replacement !== 'string' ? ' ' : replacement\n\n  function replace (match, index, value) {\n    if (index === 0 || index === (value.length - match.length)) {\n      return ''\n    }\n\n    return replacement\n  }\n\n  str = String(str)\n    // Support camel case (\"camelCase\" -> \"camel Case\").\n    .replace(CAMEL_CASE_REGEXP, '$1 $2')\n    // Support odd camel case (\"CAMELCase\" -> \"CAMEL Case\").\n    .replace(CAMEL_CASE_UPPER_REGEXP, '$1 $2')\n    // Remove all non-word characters and replace with a single space.\n    .replace(NON_WORD_REGEXP, replace)\n\n  // Lower case the entire string.\n  return lowerCase(str, locale)\n}\n","var noCase = require('no-case')\n\n/**\n * Dot case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '.')\n}\n","/**\n * Special language-specific overrides.\n *\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n *\n * @type {Object}\n */\nvar LANGUAGES = {\n  tr: {\n    regexp: /[\\u0069]/g,\n    map: {\n      '\\u0069': '\\u0130'\n    }\n  },\n  az: {\n    regexp: /[\\u0069]/g,\n    map: {\n      '\\u0069': '\\u0130'\n    }\n  },\n  lt: {\n    regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n    map: {\n      '\\u0069\\u0307': '\\u0049',\n      '\\u006A\\u0307': '\\u004A',\n      '\\u012F\\u0307': '\\u012E',\n      '\\u0069\\u0307\\u0300': '\\u00CC',\n      '\\u0069\\u0307\\u0301': '\\u00CD',\n      '\\u0069\\u0307\\u0303': '\\u0128'\n    }\n  }\n}\n\n/**\n * Upper case a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  var lang = LANGUAGES[locale]\n\n  str = str == null ? '' : String(str)\n\n  if (lang) {\n    str = str.replace(lang.regexp, function (m) { return lang.map[m] })\n  }\n\n  return str.toUpperCase()\n}\n","var upperCase = require('upper-case')\nvar lowerCase = require('lower-case')\n\n/**\n * Swap the case of a string. Manually iterate over every character and check\n * instead of replacing certain characters for better unicode support.\n *\n * @param  {String} str\n * @param  {String} [locale]\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  if (str == null) {\n    return ''\n  }\n\n  var result = ''\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i]\n    var u = upperCase(c, locale)\n\n    result += u === c ? lowerCase(c, locale) : u\n  }\n\n  return result\n}\n","var noCase = require('no-case')\n\n/**\n * Path case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '/')\n}\n","var upperCase = require('upper-case')\nvar noCase = require('no-case')\n\n/**\n * Camel case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale, mergeNumbers) {\n  var result = noCase(value, locale)\n\n  // Replace periods between numeric entities with an underscore.\n  if (!mergeNumbers) {\n    result = result.replace(/ (?=\\d)/g, '_')\n  }\n\n  // Replace spaces between words with an upper cased character.\n  return result.replace(/ (.)/g, function (m, $1) {\n    return upperCase($1, locale)\n  })\n}\n","var noCase = require('no-case')\n\n/**\n * Snake case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '_')\n}\n","var noCase = require('no-case')\nvar upperCase = require('upper-case')\n\n/**\n * Title case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale).replace(/^.| ./g, function (m) {\n    return upperCase(m, locale)\n  })\n}\n","var noCase = require('no-case')\n\n/**\n * Param case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '-')\n}\n","var noCase = require('no-case')\nvar upperCase = require('upper-case')\n\n/**\n * Header case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '-').replace(/^.|-./g, function (m) {\n    return upperCase(m, locale)\n  })\n}\n","var upperCase = require('upper-case')\n\n/**\n * Upper case the first character of a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  if (str == null) {\n    return ''\n  }\n\n  str = String(str)\n\n  return upperCase(str.charAt(0), locale) + str.substr(1)\n}\n","var camelCase = require('camel-case')\nvar upperCaseFirst = require('upper-case-first')\n\n/**\n * Pascal case a string.\n *\n * @param  {string}  value\n * @param  {string}  [locale]\n * @param  {boolean} [mergeNumbers]\n * @return {string}\n */\nmodule.exports = function (value, locale, mergeNumbers) {\n  return upperCaseFirst(camelCase(value, locale, mergeNumbers), locale)\n}\n","var upperCase = require('upper-case')\nvar snakeCase = require('snake-case')\n\n/**\n * Constant case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return upperCase(snakeCase(value, locale), locale)\n}\n","var noCase = require('no-case')\nvar upperCaseFirst = require('upper-case-first')\n\n/**\n * Sentence case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return upperCaseFirst(noCase(value, locale), locale)\n}\n","var upperCase = require('upper-case')\n\n/**\n * Check if a string is upper case.\n *\n * @param  {String}  string\n * @param  {String}  [locale]\n * @return {Boolean}\n */\nmodule.exports = function (string, locale) {\n  return upperCase(string, locale) === string\n}\n","var lowerCase = require('lower-case')\n\n/**\n * Check if a string is lower case.\n *\n * @param  {String}  string\n * @param  {String}  [locale]\n * @return {Boolean}\n */\nmodule.exports = function (string, locale) {\n  return lowerCase(string, locale) === string\n}\n","var lowerCase = require('lower-case')\n\n/**\n * Lower case the first character of a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  if (str == null) {\n    return ''\n  }\n\n  str = String(str)\n\n  return lowerCase(str.charAt(0), locale) + str.substr(1)\n}\n","exports.no = exports.noCase = require('no-case')\nexports.dot = exports.dotCase = require('dot-case')\nexports.swap = exports.swapCase = require('swap-case')\nexports.path = exports.pathCase = require('path-case')\nexports.upper = exports.upperCase = require('upper-case')\nexports.lower = exports.lowerCase = require('lower-case')\nexports.camel = exports.camelCase = require('camel-case')\nexports.snake = exports.snakeCase = require('snake-case')\nexports.title = exports.titleCase = require('title-case')\nexports.param = exports.paramCase = require('param-case')\nexports.kebab = exports.kebabCase = exports.paramCase\nexports.hyphen = exports.hyphenCase = exports.paramCase\nexports.header = exports.headerCase = require('header-case')\nexports.pascal = exports.pascalCase = require('pascal-case')\nexports.constant = exports.constantCase = require('constant-case')\nexports.sentence = exports.sentenceCase = require('sentence-case')\nexports.isUpper = exports.isUpperCase = require('is-upper-case')\nexports.isLower = exports.isLowerCase = require('is-lower-case')\nexports.ucFirst = exports.upperCaseFirst = require('upper-case-first')\nexports.lcFirst = exports.lowerCaseFirst = require('lower-case-first')\n","import { ModuleTemplate } from './templates/module';\r\nimport { ServiceTemplate } from './templates/service';\r\nimport { Logger } from './logger';\r\nimport { EnumTemplate } from './templates/enum';\r\nimport { IParserEnum, IParserServiceList, IParserModel, IParserService } from './../interfaces/parser';\r\nimport rimraf from 'rimraf';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { ModelTemplate } from './templates/model';\r\nimport { kebabCase } from 'change-case';\r\n\r\nexport class TemplatePrinter {\r\n  private out: string = '';\r\n  private enumCompiler: EnumTemplate = new EnumTemplate();\r\n  private modelCompiler: ModelTemplate = new ModelTemplate();\r\n  private serviceCompiler: ServiceTemplate = new ServiceTemplate();\r\n  private moduleCompiler: ModuleTemplate = new ModuleTemplate();\r\n  private _printedServices: string[] = [];\r\n  private _logger: Logger = new Logger();\r\n\r\n  public cleanFolder(): Promise<boolean> {\r\n    this._logger.info('clean start');\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      const deleteFolderRecursive = (path: string) => {\r\n        if (fs.existsSync(path)) {\r\n          fs.readdirSync(path).forEach(function (file, index) {\r\n            const curPath = path + \"/\" + file;\r\n            if (fs.lstatSync(curPath).isDirectory()) { // recurse\r\n              deleteFolderRecursive(curPath);\r\n            } else { // delete file\r\n              fs.unlinkSync(curPath);\r\n            }\r\n          });\r\n          fs.rmdirSync(path);\r\n        }\r\n      }\r\n      try {\r\n        deleteFolderRecursive(path.resolve(this.out));\r\n        resolve();\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n\r\n    });\r\n  }\r\n  public createFolders() {\r\n    return new Promise(\r\n      (resolve, reject) => {\r\n        this.cleanFolder().then(() => {\r\n          fs.mkdirSync(path.resolve(this.out));\r\n          fs.mkdirSync(path.resolve(this.out + '/models'));\r\n          fs.mkdirSync(path.resolve(this.out + '/models/enums'));\r\n          fs.mkdirSync(path.resolve(this.out + '/services'));\r\n          resolve();\r\n        }).catch(() => { reject(); })\r\n      }\r\n    );\r\n  }\r\n\r\n  public print(enums: IParserEnum[], models: IParserModel[], services: IParserServiceList, out: string): Promise<any> {\r\n    this.out = out;\r\n    return new Promise<any>((resolve, reject) => {\r\n      this.createFolders().then(() => {\r\n        for (const item of enums) {\r\n          this.printEnum(item);\r\n        }\r\n        this.printEnumIndex(enums);\r\n        for (const item of models) {\r\n          this.printModel(item);\r\n        }\r\n        this.printModelIndex(models);\r\n        for (const name in services) {\r\n          if (services.hasOwnProperty(name)) {\r\n            this.printService(services[name], name);\r\n          }\r\n        }\r\n        this.printServiceIndex();\r\n        this.printModule();\r\n        this.printIndex();\r\n        resolve();\r\n      });\r\n    });\r\n\r\n  }\r\n  public printEnum(value: IParserEnum) {\r\n    const compiled = this.enumCompiler.compile(value);\r\n    // this._logger.ok(path.resolve(this.out + '/models/enums/' + value.name + '.enum.ts'));\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/models/enums/' + kebabCase(value.name) + '.enum.ts'), compiled);\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/models/enums/' + value.name + '.enum.ts');\r\n    }\r\n\r\n  }\r\n  public printModel(model: IParserModel) {\r\n    const compiled = this.modelCompiler.compile(model);\r\n    /// this._logger.ok(path.resolve(this.out + '/models/' + model.name + '.model.ts'));\r\n\r\n    fs.writeFile(path.resolve(this.out + '/models/' + kebabCase(model.name) + '.model.ts'), compiled, (err) => {\r\n      if (err) {\r\n        this._logger.err('[ ERROR ] file: ' + this.out + '/models/' + model.name + '.model.ts');\r\n        return;\r\n      }\r\n      this._logger.ok('[ OK    ] file: ' + this.out + '/models/' + model.name + '.model.ts');\r\n    });\r\n\r\n  }\r\n  public printService(service: IParserService, name: string) {\r\n    const compiled = this.serviceCompiler.compile(service, name);\r\n    if (compiled !== '') {\r\n      this._printedServices.push(name);\r\n      fs.writeFile(path.resolve(this.out + '/services/' + kebabCase(name) + '.service.ts'), compiled, (err) => {\r\n        if (err) {\r\n          this._logger.err('[ ERROR ] file: ' + this.out + '/services/' + name + '.service.ts');\r\n          return;\r\n        }\r\n        this._logger.ok('[ OK    ] file: ' + this.out + '/services/' + name + '.service.ts');\r\n      });\r\n    }\r\n  }\r\n  public printModule() {\r\n    const compiled = this.moduleCompiler.compile(this._printedServices);\r\n    fs.writeFile(path.resolve(this.out + '/api.module.ts'), compiled, (err) => {\r\n      if (err) {\r\n        this._logger.err('[ ERROR ] file: ' + this.out + '/api.module.ts');\r\n        return;\r\n      }\r\n      this._logger.ok('[ OK    ] file: ' + this.out + '/api.module.ts');\r\n    });\r\n  }\r\n  public printIndex() {\r\n    const imports = `export * from './services';\r\nexport * from './models';\r\nexport { APIModule } from './api.module';\r\n`;\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/index.ts'), imports);\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/index.ts');\r\n    }\r\n  }\r\n  public printServiceIndex() {\r\n    const imports = [];\r\n    for (let item of this._printedServices) {\r\n      imports.push(`export { ${item}APIService, I${item}APIService } from './${kebabCase(item)}.service';`);\r\n    }\r\n    imports.push('');\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/services/index.ts'), imports.join('\\r\\n'));\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/services/index.ts');\r\n    }\r\n  }\r\n  public printModelIndex(models: IParserModel[]) {\r\n    const imports = [];\r\n    for (let item of models) {\r\n      imports.push(`export { ${item.name}, I${item.name} } from './${kebabCase(item.name)}.model';`);\r\n    }\r\n    imports.push(`export * from './enums';`);\r\n    imports.push('');\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/models/index.ts'), imports.join('\\r\\n'));\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/models/index.ts');\r\n    }\r\n  }\r\n  public printEnumIndex(enums: IParserEnum[]) {\r\n    const imports = [];\r\n    for (let item of enums) {\r\n      imports.push(`export {${item.name}} from './${kebabCase(item.name)}.enum';`);\r\n    }\r\n    imports.push('');\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/models/enums/index.ts'), imports.join('\\r\\n'));\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/models/enums/index.ts');\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","\r\nimport { Parser } from \"./utils/parser\";\r\nimport { ISwaggerConfig } from \"./interfaces/swagger.interface\";\r\nimport { HelpCLI } from \"./utils/helpcli\";\r\nimport { IGeneratorConfig } from \"./interfaces/config\";\r\nimport * as fs from \"fs\";\r\nimport * as request from \"request\";\r\nimport { Logger } from \"./utils/logger\";\r\nimport {\r\n  IParserEnum,\r\n  IParserModel,\r\n  IParserServiceList\r\n} from \"./interfaces/parser\";\r\nimport { TemplatePrinter } from \"./utils/template-printer\";\r\n\r\nrequest.defaults({\r\n  strictSSL: false,\r\n});\r\n\r\nexport default class Generator {\r\n  public config: IGeneratorConfig;\r\n  public swagger: ISwaggerConfig | null = null;\r\n  private parser: Parser = new Parser();\r\n  private helper: HelpCLI = new HelpCLI();\r\n  private _logger: Logger = new Logger();\r\n  private _printer: TemplatePrinter = new TemplatePrinter();\r\n  constructor(config: IGeneratorConfig | null = null) {\r\n    if (config) {\r\n      this.config = config;\r\n    } else {\r\n      this.config = this.helper.parseArgs();\r\n    }\r\n\r\n    if (this.config.help) {\r\n      this.helper.printHelp();\r\n    } else {\r\n      if (this.config.config !== \"\" && this.config.out !== \"\") {\r\n        this.start();\r\n      } else {\r\n        this._logger.err(\"Params not set, see help and try again:\");\r\n        this.helper.printHelp();\r\n      }\r\n    }\r\n  }\r\n  public start() {\r\n    this.getConfig(this.config.config).then(\r\n      res => {\r\n        this._logger.info(\"<Parsing Processed...>\");\r\n        this._logger.ok(JSON.stringify(res));\r\n        this.parser.parse(res).then(\r\n          (res: [IParserEnum[], IParserModel[], IParserServiceList]) => {\r\n            this._logger.ok(\"[ SUCCESS ]: Swagger JSON Parsed Successfull!\");\r\n            this._logger.info(\"<Files Saving>\");\r\n            let extend = null;\r\n            try {\r\n              extend = JSON.parse(\r\n                fs.readFileSync(\"./sw2ngx-extend.json\", \"utf-8\")\r\n              );\r\n            } catch (e) {\r\n              this._logger.info(\"Not have extends\");\r\n            }\r\n            if (extend) {\r\n              if (extend.enums) {\r\n                res[0].push(...extend.enums);\r\n              }\r\n              if (extend.models) {\r\n                res[1].push(...extend.models);\r\n              }\r\n              if (extend.services) {\r\n                for (const key in extend.services) {\r\n                  if (extend.services.hasOwnProperty(key)) {\r\n                    if (res[2].hasOwnProperty(key)) {\r\n                      if (extend.services[key].imports) {\r\n                        res[2][key].imports.push(\r\n                          ...extend.services[key].imports\r\n                        );\r\n                      }\r\n                      if (extend.services[key].methods) {\r\n                        res[2][key].methods.push(\r\n                          ...extend.services[key].methods\r\n                        );\r\n                      }\r\n                    } else {\r\n                      res[2][key] = extend.services[key];\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            // fs.writeFileSync(path.resolve('./result.json'), JSON.stringify({\r\n            //     enums: res[0],\r\n            //     models: res[1],\r\n            //     services: res[2]\r\n            // }));\r\n            this._printer.print(res[0], res[1], res[2], this.config.out).then(\r\n              () => {\r\n                this._logger.ok(\r\n                  \"[ SUCCESS ]: Generation API Module Successfull!\"\r\n                );\r\n              },\r\n              reject => {\r\n                console.log(\"end here\");\r\n                this._logger.err(JSON.stringify(reject));\r\n              }\r\n            );\r\n          },\r\n          err => {\r\n            this._logger.err(JSON.stringify(err));\r\n          }\r\n        );\r\n        // this._logger.info('<Create Swagger Map Object>');\r\n      },\r\n      err => {\r\n        this._logger.err(JSON.stringify(err));\r\n      }\r\n    );\r\n  }\r\n\r\n  private getConfig(conf: string): Promise<any> {\r\n    const promise = new Promise<any>((resolve, reject) => {\r\n      if (/http(s?)\\:\\/\\/\\S/gi.test(conf)) {\r\n        request.get(conf, (err, resp, body) => {\r\n          console.log(err);\r\n          if (err) {\r\n            this._logger.err(err);\r\n            reject(err);\r\n          } else {\r\n            resolve(JSON.parse(body));\r\n          }\r\n        });\r\n      } else {\r\n        this.swagger = JSON.parse(fs.readFileSync(conf, \"utf-8\"));\r\n        resolve(this.swagger);\r\n      }\r\n    });\r\n\r\n    return promise;\r\n  }\r\n}\r\n","import Generator from \"./sw2ngx\";\r\n\r\nexport default Generator;\r\nconst app = new Generator();"],"names":["CAMEL_CASE_REGEXP","CAMEL_CASE_UPPER_REGEXP","NON_WORD_REGEXP","LANGUAGES","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","fs.existsSync","fs.readdirSync","fs.lstatSync","fs.unlinkSync","fs.rmdirSync","path.resolve","fs.mkdirSync","fs.writeFileSync","kebabCase","fs.writeFile","request.defaults","fs.readFileSync","request.get"],"mappings":"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"}