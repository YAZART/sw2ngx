{"version":3,"file":"sw2ngx.umd.js","sources":["../src/utils/logger.ts","../src/utils/simhash/jenkins.ts","../src/utils/simhash/simhash.ts","../src/utils/parser.ts","../src/interfaces/params.ts","../src/utils/helpcli.ts","../src/utils/templates/module.ts","../src/utils/templates/service.ts","../src/utils/templates/enum.ts","../node_modules/rollup-plugin-node-builtins/src/es6/path.js","../src/utils/templates/model.ts","../src/utils/template-printer.ts","../src/sw2ngx.ts","../src/index.ts"],"sourcesContent":["export interface IColor {\r\n  [key: string]: string;\r\n}\r\nexport const COLORS_HLP = {\r\n  reset: '\\x1b[0m',\r\n  bright: '\\x1b[1m',\r\n  dim: '\\x1b[2m',\r\n  underscore: '\\x1b[4m',\r\n  blink: '\\x1b[5m',\r\n  reverse: '\\x1b[7m',\r\n  hidden: '\\x1b[8m'\r\n} as IColor;\r\n\r\nexport const COLORS_TXT = {\r\n  black: '\\x1b[30m',\r\n  red: '\\x1b[31m',\r\n  green: '\\x1b[32m',\r\n  yellow: '\\x1b[33m',\r\n  blue: '\\x1b[34m',\r\n  magenta: '\\x1b[35m',\r\n  cyan: '\\x1b[36m',\r\n  white: '\\x1b[37m'\r\n} as IColor;\r\n\r\nexport const COLORS_BG = {\r\n  black: '\\x1b[40m',\r\n  red: '\\x1b[41m',\r\n  green: '\\x1b[42m',\r\n  yellow: '\\x1b[43m',\r\n  blue: '\\x1b[44m',\r\n  magenta: '\\x1b[45m',\r\n  cyan: '\\x1b[46m',\r\n  white: '\\x1b[47m'\r\n} as IColor;\r\n\r\nexport class Logger {\r\n  public reset(): Logger {\r\n    process.stdout.write(COLORS_HLP.reset);\r\n    return this;\r\n  }\r\n  public bg(color: string): Logger {\r\n    process.stdout.write(COLORS_BG[color]);\r\n    return this;\r\n  }\r\n  public fg(color: string): Logger {\r\n    process.stdout.write(COLORS_TXT[color]);\r\n    return this;\r\n  }\r\n  public write(line: string): Logger {\r\n    process.stdout.write(line);\r\n    return this;\r\n  }\r\n  public writeln(line: string): Logger {\r\n    process.stdout.write(line);\r\n    process.stdout.write('\\r\\n');\r\n    return this;\r\n  }\r\n  public info(message: string) {\r\n    this.reset().writeln('').fg('blue').writeln(message).reset();\r\n  }\r\n  public err(message: string) {\r\n    this.reset().writeln('').fg('red').writeln(message).reset();\r\n  }\r\n  public ok(message: string) {\r\n    this.reset().writeln('').fg('green').writeln(message).reset();\r\n  }\r\n}\r\n","/* eslint-disable no-fallthrough */\r\nexport class Jenkins {\r\n    public pc = 0;\r\n    public pb = 0;\r\n    constructor() {\r\n        /**\r\n         * Default first initial seed.\r\n         */\r\n        this.pc = 0;\r\n\r\n        /**\r\n         * Default second initial seed.\r\n         */\r\n        this.pb = 0;\r\n    }\r\n\r\n    // --------------------------------------------------\r\n    // Public access\r\n    // --------------------------------------------------\r\n\r\n    /**\r\n     * Computes and returns 32-bit hash of given message.\r\n     */\r\n    public hash32(msg: string) {\r\n        const h = this.lookup3(msg, this.pc, this.pb);\r\n        return (h.c).toString(16);\r\n    }\r\n\r\n    /**\r\n     * Computes and returns 32-bit hash of given message.\r\n     */\r\n    public hash64(msg: string) {\r\n        const h = this.lookup3(msg, this.pc, this.pb);\r\n        return (h.b).toString(16) + (h.c).toString(16);\r\n    }\r\n    private lookup3(k: string, pc: number, pb: number) {\r\n        let length = k.length;\r\n        let a;\r\n        let b;\r\n        let c;\r\n\r\n        a = b = c = 0xdeadbeef + length + pc;\r\n        c += pb;\r\n\r\n        let offset = 0;\r\n        let mixed;\r\n        while (length > 12) {\r\n            a += k.charCodeAt(offset + 0);\r\n            a += k.charCodeAt(offset + 1) << 8;\r\n            a += k.charCodeAt(offset + 2) << 16;\r\n            a += k.charCodeAt(offset + 3) << 24;\r\n\r\n            b += k.charCodeAt(offset + 4);\r\n            b += k.charCodeAt(offset + 5) << 8;\r\n            b += k.charCodeAt(offset + 6) << 16;\r\n            b += k.charCodeAt(offset + 7) << 24;\r\n\r\n            c += k.charCodeAt(offset + 8);\r\n            c += k.charCodeAt(offset + 9) << 8;\r\n            c += k.charCodeAt(offset + 10) << 16;\r\n            c += k.charCodeAt(offset + 11) << 24;\r\n\r\n            mixed = this.mix(a, b, c);\r\n            a = mixed.a;\r\n            b = mixed.b;\r\n            c = mixed.c;\r\n\r\n            length -= 12;\r\n            offset += 12;\r\n        }\r\n\r\n        switch (length) {\r\n            case 12:\r\n                c += k.charCodeAt(offset + 11) << 24;\r\n            case 11:\r\n                c += k.charCodeAt(offset + 10) << 16;\r\n            case 10:\r\n                c += k.charCodeAt(offset + 9) << 8;\r\n            case 9:\r\n                c += k.charCodeAt(offset + 8);\r\n            case 8:\r\n                b += k.charCodeAt(offset + 7) << 24;\r\n            case 7:\r\n                b += k.charCodeAt(offset + 6) << 16;\r\n            case 6:\r\n                b += k.charCodeAt(offset + 5) << 8;\r\n            case 5:\r\n                b += k.charCodeAt(offset + 4);\r\n            case 4:\r\n                a += k.charCodeAt(offset + 3) << 24;\r\n            case 3:\r\n                a += k.charCodeAt(offset + 2) << 16;\r\n            case 2:\r\n                a += k.charCodeAt(offset + 1) << 8;\r\n            case 1:\r\n                a += k.charCodeAt(offset + 0);\r\n                break;\r\n\r\n            case 0:\r\n                return { c: c >>> 0, b: b >>> 0 };\r\n        }\r\n\r\n        // Final mixing of three 32-bit values in to c\r\n        mixed = this.finalMix(a, b, c)\r\n        a = mixed.a;\r\n        b = mixed.b;\r\n        c = mixed.c;\r\n\r\n        return { c: c >>> 0, b: b >>> 0 };\r\n    }\r\n\r\n    /**\r\n     * Mixes 3 32-bit integers reversibly but fast.\r\n     */\r\n    private mix(a: number, b: number, c: number) {\r\n        a -= c;\r\n        a ^= this.rot(c, 4);\r\n        c += b;\r\n        b -= a;\r\n        b ^= this.rot(a, 6);\r\n        a += c;\r\n        c -= b;\r\n        c ^= this.rot(b, 8);\r\n        b += a;\r\n        a -= c;\r\n        a ^= this.rot(c, 16);\r\n        c += b;\r\n        b -= a;\r\n        b ^= this.rot(a, 19);\r\n        a += c;\r\n        c -= b;\r\n        c ^= this.rot(b, 4);\r\n        b += a;\r\n        return { a: a, b: b, c: c };\r\n    }\r\n\r\n    /**\r\n     * Final mixing of 3 32-bit values (a,b,c) into c\r\n     */\r\n    private finalMix(a: number, b: number, c: number) {\r\n        c ^= b;\r\n        c -= this.rot(b, 14);\r\n        a ^= c;\r\n        a -= this.rot(c, 11);\r\n        b ^= a;\r\n        b -= this.rot(a, 25);\r\n        c ^= b;\r\n        c -= this.rot(b, 16);\r\n        a ^= c;\r\n        a -= this.rot(c, 4);\r\n        b ^= a;\r\n        b -= this.rot(a, 14);\r\n        c ^= b;\r\n        c -= this.rot(b, 24);\r\n        return { a: a, b: b, c: c };\r\n    }\r\n    /**\r\n     * Rotate x by k distance.\r\n     */\r\n    private rot(x: number, k: number) {\r\n        return (((x) << (k)) | ((x) >> (32 - (k))));\r\n    }\r\n\r\n}\r\n\r\n\r\n// --------------------------------------------------\r\n// Private methods\r\n// --------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Jenkins} from './jenkins';\r\n\r\nexport interface ISimHashOptions {\r\n    kshingles?: number;\r\n    maxFeatures?: number;\r\n}\r\n\r\nexport class SimHash {\r\n    public kshingles = 4;\r\n    public maxFeatures = 128;\r\n    constructor(options?: ISimHashOptions) {\r\n        if (options) {\r\n            /**\r\n             * By default, we tokenize input into chunks of this size.\r\n             */\r\n            if (options.kshingles) {\r\n                this.kshingles = options.kshingles;\r\n            }\r\n            /**\r\n             * By default, this many number of minimum shingles will \r\n             * be combined to create the final hash.\r\n             */\r\n            if (options.maxFeatures) {\r\n                this.maxFeatures = options.maxFeatures;\r\n            }\r\n        }\r\n    }\r\n\r\n    // --------------------------------------------------\r\n    // Public access\r\n    // --------------------------------------------------\r\n\r\n    /**\r\n     * Driver function.\r\n     */\r\n    public hash(input: string) {\r\n        const tokens = this.tokenize(input);\r\n        const shingles = [];\r\n        const jenkins = new Jenkins();\r\n        // eslint-disable-next-line @typescript-eslint/no-for-in-array\r\n        for (const i in tokens) {\r\n            shingles.push(jenkins.hash32(tokens[i]));\r\n        }\r\n        let simhash = this.combineShingles(shingles);\r\n        simhash >>>= 0;\r\n        return simhash;\r\n    }\r\n    /**\r\n     * Tokenizes input into 'kshingles' number of tokens.\r\n     */\r\n    private tokenize(original: string) {\r\n        const size = original.length;\r\n        if (size <= this.kshingles) {\r\n            return [original.substr(0)];\r\n        }\r\n\r\n        const shingles = [];\r\n        for (let i = 0; i < size; i = i + this.kshingles) {\r\n            shingles.push(i + this.kshingles < size ? original.slice(i, i + this.kshingles) : original.slice(i));\r\n        }\r\n        return shingles;\r\n    }\r\n\r\n    private combineShingles(shingles: any[]) {\r\n        if (shingles.length === 0) return;\r\n\r\n        if (shingles.length === 1) return shingles[0];\r\n\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        shingles.sort(this.hashComparator);\r\n        if (shingles.length > this.maxFeatures) shingles = shingles.splice(this.maxFeatures);\r\n\r\n        let simhash = 0x0;\r\n        let mask = 0x1;\r\n        for (let pos = 0; pos < 32; pos++) {\r\n            let weight = 0;\r\n            // eslint-disable-next-line @typescript-eslint/no-for-in-array\r\n            for (const i in shingles) {\r\n                const shingle = parseInt(shingles[i], 16);\r\n                weight += !(~shingle & mask) === true ? 1 : -1;\r\n            }\r\n            if (weight > 0) simhash |= mask;\r\n            mask <<= 1;\r\n        }\r\n\r\n        return simhash;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Calculates binary hamming distance of two base 16 integers.\r\n     */\r\n    private hammingDistanceSlow(x: string, y: string) {\r\n        let distance = 0;\r\n        let val = parseInt(x, 16) ^ parseInt(y, 16);\r\n        while (val) {\r\n            ++distance;\r\n            val &= val - 1;\r\n        }\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * TODO: Use a priority queue. Till then this comparator is \r\n     * used to find the least 'maxFeatures' shingles.\r\n     */\r\n    public hashComparator(a: number, b: number) {\r\n        return a < b ? -1 : (a > b ? 1 : 0);\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {\r\n  ISwaggerConfig,\r\n  ISwaggerProperty,\r\n  ISwaggerParam\r\n} from './../interfaces/swagger.interface';\r\nimport { Logger } from './logger';\r\nimport {\r\n  IParserModel,\r\n  IParserEnum,\r\n  IParserResolvedType,\r\n  IParserServiceList,\r\n  IParserParam,\r\n  IParserMethod\r\n} from '../interfaces/parser';\r\nimport { SimHash } from './simhash/simhash';\r\nimport { paramCase, camelCase, pascalCase } from 'change-case';\r\n\r\nexport class Parser {\r\n  private _enums: IParserEnum[] = [];\r\n  private _models: IParserModel[] = [];\r\n  private _servicesList: IParserServiceList = {};\r\n  private _logger: Logger = new Logger();\r\n  private _simHash: SimHash = new SimHash();\r\n\r\n  public parse(config: ISwaggerConfig): Promise<any> {\r\n    return new Promise<any>((resolve, reject) => {\r\n      this._logger.info('start parsing');\r\n      this.parseModels(config).then(\r\n        () => {\r\n          this._logger.info('models parsed');\r\n          this.parseServices(config).then(\r\n            () => {\r\n              this._logger.info('services parsed');\r\n              resolve([this._enums, this._models, this._servicesList]);\r\n            },\r\n            (err) => {\r\n              this._logger.info('services error');\r\n              this.handleError(JSON.stringify(err));\r\n              reject(err);\r\n            }\r\n          );\r\n        },\r\n        (err) => {\r\n          this._logger.err('[ ERROR ]: Parsing enums error!');\r\n          this.handleError(JSON.stringify(err));\r\n          reject(err);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  public parseModels(\r\n    config: ISwaggerConfig\r\n  ): Promise<[IParserEnum[], IParserModel[]]> {\r\n    const models = config.definitions;\r\n    return new Promise<[IParserEnum[], IParserModel[]]>((resolve) => {\r\n      for (const key in models) {\r\n        const model = {\r\n          name: '',\r\n          description: '',\r\n          imports: [],\r\n          props: []\r\n        } as IParserModel;\r\n        if (models[key]) {\r\n          const imports = [];\r\n          model.name = 'I' + key;\r\n          model.description = models[key].description;\r\n          for (const prop in models[key].properties) {\r\n            if (models[key].properties[prop]) {\r\n              const temp = this.parseModelProp(\r\n                prop,\r\n                models[key].properties[prop],\r\n                model.name\r\n              );\r\n              imports.push(temp.imports);\r\n              model.props.push(temp);\r\n            }\r\n          }\r\n          model.imports = this.resolveImports(imports);\r\n        }\r\n        this._models.push(model);\r\n      }\r\n      resolve([this._enums, this._models]);\r\n    });\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n  public parseTags(tags: string[]) {\r\n    if (tags.length >= 1) {\r\n      return tags[0];\r\n    } else {\r\n      return '__common';\r\n    }\r\n  }\r\n\r\n  public parseServices(config: ISwaggerConfig): Promise<IParserServiceList> {\r\n    return new Promise<IParserServiceList>((resolve) => {\r\n      const result: IParserServiceList = {\r\n        __common: {\r\n          uri: config.basePath,\r\n          imports: [],\r\n          methods: []\r\n        }\r\n      };\r\n      for (const path in config.paths) {\r\n        if (config.paths[path]) {\r\n          for (const method in config.paths[path]) {\r\n            if (config.paths[path][method]) {\r\n              this._logger.ok(path);\r\n              const parsedMethod = this.parseMethod(\r\n                path,\r\n                method,\r\n                config.paths[path][method]\r\n              );\r\n              if (result[parsedMethod.tag]) {\r\n                const duplicates = result[parsedMethod.tag].methods.filter(\r\n                  (x) => x.name.replace(/\\d+$/gi, '') === parsedMethod.name\r\n                );\r\n                if (duplicates.length > 0) {\r\n                  parsedMethod.name = parsedMethod.name + duplicates.length;\r\n                }\r\n                result[parsedMethod.tag].methods.push(parsedMethod);\r\n              } else {\r\n                result[parsedMethod.tag] = {\r\n                  uri: config.basePath,\r\n                  imports: [],\r\n                  methods: [parsedMethod]\r\n                };\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this._servicesList = this.resolveServiceImports(result);\r\n      resolve(this._servicesList);\r\n    });\r\n  }\r\n  public genMethodName(uri: string, type: string): string {\r\n    const tmp = pascalCase(uri.replace(/\\//gi, '-').replace(/\\{|\\}|\\$/gi, ''));\r\n    switch (type.toLocaleLowerCase()) {\r\n      case 'post':\r\n        return 'send' + tmp;\r\n      case 'delete':\r\n        return 'delete' + tmp;\r\n      case 'put':\r\n        return 'update' + tmp;\r\n      case 'get':\r\n      default:\r\n        return 'get' + tmp;\r\n    }\r\n  }\r\n  public parseMethod(uri: string, type: string, method: any): IParserMethod {\r\n    const name = method.operationId\r\n      ? method.operationId\r\n      : this.genMethodName(uri, type);\r\n    const tag = this.parseTags(method.tags);\r\n    const params = this.parseParams(method.parameters, camelCase(name));\r\n    const resp = this.parseResponse(method.responses, camelCase(name));\r\n    return {\r\n      uri: uri.replace(/\\{/gi, '${'),\r\n      type: type,\r\n      tag: tag,\r\n      name: camelCase(name),\r\n      description: method.summary,\r\n      params: params,\r\n      resp: resp\r\n    };\r\n  }\r\n\r\n  public resolveServiceImports(\r\n    servicesList: IParserServiceList\r\n  ): IParserServiceList {\r\n    for (const serv in servicesList) {\r\n      if (servicesList[serv]) {\r\n        const imports = [];\r\n        for (const method of servicesList[serv].methods) {\r\n          if (method.resp.length > 0) {\r\n            for (const item of method.resp) {\r\n              imports.push(item.typeImport);\r\n            }\r\n          }\r\n          for (const param of method.params.all) {\r\n            if (param.type.typeImport) {\r\n              imports.push(param.type.typeImport);\r\n            }\r\n          }\r\n        }\r\n        servicesList[serv].imports = this.resolveImports(imports);\r\n      }\r\n    }\r\n    return servicesList;\r\n  }\r\n\r\n  public get models(): IParserModel[] {\r\n    return this._models;\r\n  }\r\n\r\n  public get enums(): IParserEnum[] {\r\n    return this._enums;\r\n  }\r\n\r\n  public get services(): IParserServiceList {\r\n    return this._servicesList;\r\n  }\r\n\r\n  public parseParams(params: ISwaggerParam[], method: string) {\r\n    const parsed = {\r\n      all: [],\r\n      uri: [],\r\n      query: [],\r\n      payload: [],\r\n      form: [],\r\n      urlencoded: []\r\n    } as {\r\n      [key: string]: IParserParam[];\r\n    };\r\n    if (!params) {\r\n      return parsed;\r\n    }\r\n    for (const param of params) {\r\n      let type = null;\r\n      const paramName = this.resolveParamName(param.name);\r\n      if (param.schema) {\r\n        type = this.resolveType(\r\n          param.schema as ISwaggerProperty,\r\n          paramName,\r\n          method\r\n        );\r\n      } else {\r\n        type = this.resolveType(param as ISwaggerProperty, paramName, method);\r\n      }\r\n      const res = {\r\n        name: this.clearName(param.name),\r\n        queryName: paramName,\r\n        description: param.description ? param.description : '',\r\n        required: param.required ? true : false,\r\n        type: type\r\n      } as IParserParam;\r\n\r\n      if (param.in === 'path') {\r\n        parsed.uri.push(res);\r\n      }\r\n      if (param.in === 'query') {\r\n        parsed.query.push(res);\r\n      }\r\n      if (param.in === 'body') {\r\n        parsed.payload.push(res);\r\n      }\r\n      if (param.in === 'formData') {\r\n        parsed.form.push(res);\r\n      }\r\n      parsed.all.push(res);\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  public clearName(name: string): string {\r\n    const baseTypes = ['number', 'string', 'boolean', 'any', 'array'];\r\n    let result = name.replace(/\\.|-/gi, '');\r\n    if (baseTypes.includes(result)) {\r\n      result = result + 'Param';\r\n    }\r\n    return result;\r\n  }\r\n  public resolveParamName(name: string): string {\r\n    this._logger.ok(name);\r\n    const temp = name.split('.');\r\n    if (temp.length > 1) {\r\n      const result = temp.pop() as string;\r\n      console.log(result);\r\n      const tmpResult = result.split('');\r\n      tmpResult[0] = tmpResult[0].toUpperCase();\r\n      return tmpResult.join('');\r\n    }\r\n    return temp.pop() as any;\r\n  }\r\n\r\n  public parseResponse(responses: any, method: string): IParserResolvedType[] {\r\n    if (responses['200']) {\r\n      if (responses['200']['schema']) {\r\n        let resolvedType: IParserResolvedType = {\r\n          typeName: '',\r\n          typeImport: ''\r\n        } as IParserResolvedType;\r\n        if (responses['200']['schema']['enum']) {\r\n          resolvedType.typeName = 'number';\r\n        } else {\r\n          resolvedType = this.resolveType(\r\n            responses['200']['schema'],\r\n            'response',\r\n            method\r\n          );\r\n        }\r\n        if (resolvedType.typeName === '') {\r\n          return [\r\n            {\r\n              typeName: 'any',\r\n              typeImport: null\r\n            }\r\n          ];\r\n        } else {\r\n          if (resolvedType.typeImport !== '') {\r\n            return [resolvedType];\r\n          } else {\r\n            return [\r\n              {\r\n                typeName: resolvedType.typeName,\r\n                typeImport: null\r\n              }\r\n            ];\r\n          }\r\n        }\r\n      } else {\r\n        return [\r\n          {\r\n            typeName: 'any',\r\n            typeImport: null\r\n          }\r\n        ];\r\n      }\r\n    } else {\r\n      return [\r\n        {\r\n          typeName: 'any',\r\n          typeImport: null\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  public resolveImports(imports: any[]): any[] {\r\n    const result: any[] = [];\r\n    for (const imp of imports) {\r\n      if (!result.includes(imp)) {\r\n        if (imp !== null) {\r\n          result.push(imp);\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public parseModelProp(\r\n    name: string,\r\n    prop: ISwaggerProperty,\r\n    modelName: string\r\n  ) {\r\n    const resolvedType = this.resolveType(prop, name, modelName);\r\n    return {\r\n      name: name,\r\n      type: resolvedType.typeName,\r\n      imports: resolvedType.typeImport,\r\n      description: prop.description !== '' ? prop.description : ''\r\n    };\r\n  }\r\n\r\n  public resolveType(\r\n    prop: ISwaggerProperty,\r\n    name: string,\r\n    parent: string\r\n  ): IParserResolvedType {\r\n    const curname = name.replace(/\\.|-/gi, '_');\r\n    if (prop === undefined) {\r\n      return {\r\n        typeName: 'any',\r\n        typeImport: null\r\n      };\r\n    }\r\n    if (!prop.enum && !prop.format) {\r\n      if (prop.$ref !== undefined) {\r\n        const temp = prop.$ref.split('/');\r\n        return {\r\n          typeName: 'I' + temp[temp.length - 1],\r\n          typeImport: 'I' + temp[temp.length - 1]\r\n        };\r\n      }\r\n      if (\r\n        prop.type === 'boolean' ||\r\n        prop.type === 'string' ||\r\n        prop.type === 'number'\r\n      ) {\r\n        return {\r\n          typeName: prop.type,\r\n          typeImport: null\r\n        };\r\n      }\r\n      if (prop.type === 'array') {\r\n        if (prop.items) {\r\n          const temp = this.resolveType(prop.items, curname, parent);\r\n          return {\r\n            typeName: temp.typeName + '[]',\r\n            typeImport: temp.typeImport\r\n          };\r\n        }\r\n      }\r\n      if (prop.type === 'object') {\r\n        return {\r\n          typeName: 'any',\r\n          typeImport: null\r\n        };\r\n      }\r\n    } else {\r\n      if (prop.enum !== undefined) {\r\n        return this.resolveEnums(prop.description, prop.enum, name, parent);\r\n      }\r\n      if (prop.format) {\r\n        const result = { typeName: '', typeImport: null };\r\n        switch (prop.format) {\r\n          case 'date-time':\r\n          case 'date':\r\n            result.typeName = 'string';\r\n            break;\r\n          case 'int32':\r\n          case 'integer':\r\n          case 'float':\r\n          case 'double':\r\n          case 'int64':\r\n            result.typeName = 'number';\r\n            break;\r\n          case 'password':\r\n            result.typeName = 'string';\r\n            break;\r\n          default:\r\n            result.typeName = 'any';\r\n            break;\r\n        }\r\n        return result;\r\n      }\r\n    }\r\n    return {\r\n      typeName: 'any',\r\n      typeImport: null\r\n    };\r\n  }\r\n\r\n  public handleError(e: any) {\r\n    this._logger.reset().fg('red').writeln(e).reset();\r\n  }\r\n\r\n  public resolveEnums(\r\n    description: string,\r\n    evalue: number[],\r\n    curname: string,\r\n    parent: string\r\n  ): IParserResolvedType {\r\n    const hashName = this._simHash.hash(evalue.join('|'));\r\n    // this._logger.ok(`${parent}_${curname}Set: ${hashName.toString(16)}`);\r\n    // this._logger.err(hashName);\r\n    const extact = this.extractEnumDescription(description ? description : '');\r\n    //  this._logger.err(JSON.stringify({description, evalue, curname, parent}))\r\n\r\n    if (extact === null) {\r\n      const numbers = '1234567890'.split('');\r\n      if (\r\n        evalue\r\n          .join('')\r\n          .split('')\r\n          .filter((x) => !numbers.includes(x)).length > 0\r\n      ) {\r\n        return {\r\n          typeName: evalue.map((x) => `'${x}'`).join(' | '),\r\n          typeImport: null\r\n        };\r\n      }\r\n      return {\r\n        typeName: evalue.join(' | '),\r\n        typeImport: null\r\n      };\r\n    }\r\n    const withParentName = `${pascalCase(\r\n      paramCase(parent).replace(/^i-/gi, '') + '-' + paramCase(curname + 'Set')\r\n    )}`;\r\n    const propEnum: IParserEnum = {\r\n      name: `${pascalCase(curname)}Set`,\r\n      modelName: parent,\r\n      value: extact,\r\n      hash: hashName.toString(16)\r\n    };\r\n\r\n    const duplicate = this._enums.filter(\r\n      (x) => x.name.replace(/\\d+$/gi, '') === propEnum.name\r\n    );\r\n    const extDuplicate = this._enums.filter(\r\n      (x) => x.name.replace(/\\d+$/gi, '') === withParentName\r\n    );\r\n    if (duplicate.length > 0) {\r\n      const equals = duplicate.filter((x) => x.hash === propEnum.hash);\r\n      if (equals.length > 0) {\r\n        return {\r\n          typeName: equals[0].name,\r\n          typeImport: equals[0].name\r\n        };\r\n      } else {\r\n        if (extDuplicate.length > 0) {\r\n          propEnum.name = `${withParentName}${duplicate.length}`;\r\n        } else {\r\n          propEnum.name = withParentName;\r\n        }\r\n        this._enums.push(propEnum);\r\n        return {\r\n          typeName: propEnum.name,\r\n          typeImport: propEnum.name\r\n        };\r\n      }\r\n    } else {\r\n      this._enums.push(propEnum);\r\n      return {\r\n        typeName: propEnum.name,\r\n        typeImport: propEnum.name\r\n      };\r\n    }\r\n  }\r\n\r\n  public extractEnumDescription(description: string) {\r\n    const result = [];\r\n    const indexOf = description.search(/\\(\\d/gi);\r\n    if (indexOf !== -1) {\r\n      description = description.substr(indexOf + 1).replace(')', '');\r\n      const temp = description.split(',');\r\n      for (const tmp of temp) {\r\n        const key = tmp.split('=');\r\n        result.push({\r\n          key: key[1],\r\n          val: parseInt(key[0], 10)\r\n        });\r\n      }\r\n      return result;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","export const GeneratorParams: IGeneratorParam[] = [\r\n  {\r\n    name: 'config',\r\n    keys: ['-c', '--c'],\r\n    noValue: false,\r\n    description: 'Swagger doc path'\r\n  },\r\n  {\r\n    name: 'out',\r\n    keys: ['-o', '--o'],\r\n    noValue: false,\r\n    description: 'Output directory'\r\n  },\r\n  {\r\n    name: 'help',\r\n    keys: ['-h', '--h', 'help', '-help'],\r\n    noValue: true,\r\n    description: 'Call help'\r\n  }\r\n];\r\n\r\nexport interface IGeneratorParam {\r\n  name: string;\r\n  keys: string[];\r\n  noValue: boolean;\r\n  description: string;\r\n}\r\n","import { Logger } from './logger';\r\nimport { GeneratorParams } from '../interfaces/params';\r\nimport { IGeneratorConfig } from '../interfaces/config';\r\n\r\nexport class HelpCLI {\r\n  public logger: Logger = new Logger();\r\n  public parseArgs(): IGeneratorConfig {\r\n    const params: IGeneratorConfig = {\r\n      config: '',\r\n      out: '',\r\n      help: false\r\n    };\r\n    const args = process.argv;\r\n    for (let i = 0; i < args.length; i++) {\r\n      for (const param of GeneratorParams) {\r\n        if (param.keys.includes(args[i])) {\r\n          if (param.noValue) {\r\n            params[param.name] = true;\r\n            break;\r\n          } else {\r\n            params[param.name] = args[i + 1];\r\n            i++;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return params;\r\n  }\r\n  public printHelp() {\r\n    this.logger\r\n      .fg('green')\r\n      .writeln('')\r\n      .write('[HELP]')\r\n      .write(':')\r\n      .writeln('')\r\n      .reset()\r\n      .writeln('');\r\n    for (const key of GeneratorParams) {\r\n      let line = `     ${key.name}          `;\r\n      line = line.substr(0, 15);\r\n      const args = new Array(40).fill(' ');\r\n      let i = 1;\r\n      for (const arg of key.keys) {\r\n        args[i + 2] = arg;\r\n        i = i + 2;\r\n      }\r\n      this.logger.write(line).fg('yellow');\r\n      line = args.join('');\r\n      line = line.substr(0, 20);\r\n      this.logger.write(line).reset();\r\n      line = '     ' + key.description;\r\n      this.logger.write(line);\r\n      this.logger.writeln('');\r\n    }\r\n  }\r\n}\r\n","export class ModuleTemplate {\r\n  public compile(value: string[]) {\r\n    const servicesList: string[] = [];\r\n    for (const el of value) {\r\n      servicesList.push(`${el}APIService,`);\r\n    }\r\n    const importsHead: string = servicesList.join('\\r\\n\\t');\r\n    const importsBody: string = servicesList.join('\\r\\n\\t\\t\\t\\t');\r\n    return `\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport {\r\n  ${importsHead}\r\n} from './services';\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule\r\n  ],\r\n  exports: [],\r\n  declarations: [],\r\n  providers: [\r\n    ${importsBody}\r\n  ],\r\n})\r\nexport class APIModule { }\r\n`;\r\n  }\r\n}\r\n","import { IParserService, IParserMethod } from './../../interfaces/parser';\r\nexport class ServiceTemplate {\r\n  public imports(imp: string[]): string {\r\n    const imports = [];\r\n    if (imp.length === 0) {\r\n      return '';\r\n    }\r\n    imports.push(`import {`);\r\n    for (const item of imp) {\r\n      imports.push(`${item},`);\r\n    }\r\n    imports.push(`} from '../models';`);\r\n    return imports.join('\\r\\n');\r\n  }\r\n\r\n  public methodDescription(method: IParserMethod): string {\r\n    const temp = [];\r\n    temp.push(`\r\n    /**\r\n     * @method\r\n     * @name  ${method.name}\r\n     * @description${method.description ? method.description.replace('\\r\\n', '') : ''}\\r\\n`\r\n    );\r\n    for (const param of method.params.all) {\r\n      temp.push(`     * @param {${param.type.typeName}} ${param.name}\\r\\n`);\r\n    }\r\n    temp.push(`     */`);\r\n    return temp.join('');\r\n\r\n  }\r\n\r\n  public methodParams(method: IParserMethod, isInterface: boolean): string {\r\n    const temp = [];\r\n    for (const param of method.params.all) {\r\n      if (!isInterface) {\r\n        if (param.default) {\r\n          temp.push(`${param.name}: ${param.type.typeName} = '${param.default}'`);\r\n        } else {\r\n          temp.push(`${param.name}: ${param.type.typeName}` + (param.required ? '' : ' = null'));\r\n        }\r\n      } else {\r\n        temp.push(`${param.name}${param.required ? '' : '?'}: ${param.type.typeName}`);\r\n      }\r\n    }\r\n    if(isInterface){\r\n      temp.push('customHeaders?: {[key:string]:string}');\r\n    }else{\r\n      temp.push('customHeaders: {[key:string]:string} = { }');\r\n    }\r\n\r\n    return temp.join(', ');\r\n  }\r\n\r\n  public methodBody(method: IParserMethod) {\r\n    const temp = [];\r\n    if (method.params.query.length > 0) {\r\n      temp.push(`\r\n        let paramString = '';`);\r\n      let isFirst = true;\r\n      for (const param of method.params.query) {\r\n        temp.push(`\r\n        if ((${param.name} !== undefined) && (${param.name} !== null)) {\r\n            paramString += '${isFirst ? '' : '&'}${param.queryName}=' + encodeURIComponent(${param.name}${param.type.typeName === 'Date' ? '.toISOString()' : '.toString()'});\r\n        }${param.required ? \" else { throw new Error('Required param(\" + param.name + \") not set!'); }\" : ''}`);\r\n        isFirst = false;\r\n      }\r\n      temp.push(`\r\n        options.params = new HttpParams({fromString: paramString});`);\r\n    }\r\n\r\n    if ((method.type === 'post') || (method.type === 'put')) {\r\n\r\n      if (method.params.form.length !== 0) {\r\n        temp.push(`\r\n        options.headers = new HttpHeaders( customHeaders );\r\n        options.headers.delete('Content-Type');\r\n        const form = new FormData();`);\r\n        for (const param of method.params.form) {\r\n          if (param.type.typeName === 'any') {\r\n            temp.push(`\r\n        form.append('${param.queryName}', ${param.name});`);\r\n          } else {\r\n            temp.push(`\r\n        form.append('${param.queryName}', JSON.stringify(${param.name}));`);\r\n          }\r\n        }\r\n        temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`, form, options);`);\r\n      } else {\r\n        if (method.params.urlencoded.length !== 0) {\r\n          temp.push(`\r\n        let payload = '';\r\n        options.headers = new HttpHeaders(Object.assign( customHeaders, {'Content-Type': 'application/x-www-form-urlencoded'}));`);\r\n          let isFirst = true;\r\n          for (const param of method.params.urlencoded) {\r\n            temp.push(`\r\n        if ((${param.name} !== undefined) && (${param.name} !== null)) {\r\n            payload += '${isFirst ? '' : '&'}${param.queryName}=' + encodeURIComponent(${param.name}${param.type.typeName === 'Date' ? '.toISOString()' : '.toString()'});\r\n        }${param.required ? \" else { throw new Error('Required param(\" + param.name + \") not set!'); }\" : ''}`);\r\n            isFirst = false;\r\n          }\r\n          temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`, payload, options);`);\r\n        } else {\r\n          temp.push(`\r\n        // tslint:disable-next-line:prefer-const\r\n        let payload = {};\r\n        options.headers = new HttpHeaders(Object.assign( customHeaders, {'Content-Type': 'application/json; charset=utf-8'}));`);\r\n          if (method.params.payload.length > 1) {\r\n            for (const param of method.params.payload) {\r\n              temp.push(`\r\n        payload['${param.queryName}'] = ${param.name};`);\r\n            }\r\n          } else {\r\n            if (method.params.payload.length > 0) {\r\n              temp.push(`\r\n        payload = ${method.params.payload[0].name};`);\r\n            }\r\n          }\r\n          temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`, JSON.stringify(payload), options);`);\r\n        }\r\n      }\r\n    }\r\n\r\n    if ((method.type === 'get') || (method.type === 'delete')) {\r\n      temp.push(`\r\n        return this.http.${method.type}<${method.resp[0].typeName}>(this.uri + \\`${method.uri}\\`${method.params.query.length !== 0 ? ', options' : ''});`);\r\n    }\r\n\r\n    return temp.join('\\r\\n');\r\n  }\r\n  public body(methods: IParserMethod[]) {\r\n    const interBody: string[] = [];\r\n    const serviceBody: string[] = [];\r\n    for (const method of methods) {\r\n      interBody.push(`${this.methodDescription(method)}\r\n    ${method.name}(${this.methodParams(method, true)}): Observable<${method.resp[0].typeName}>;`);\r\n      serviceBody.push(`\\tpublic ${method.name}(${this.methodParams(method, false)}): Observable<${method.resp[0].typeName}> {\r\n        const options = {\r\n            headers: new HttpHeaders( customHeaders ),\r\n            params: new HttpParams()\r\n        };\r\n${this.methodBody(method)}\r\n    }`);\r\n    }\r\n    return { interfaceBody: interBody.join('\\r\\n'), serviceBody: serviceBody.join('\\r\\n') }\r\n  }\r\n  public compile(value: IParserService, name: string): string {\r\n    if (value.methods.length > 0) {\r\n      const imports: string = this.imports(value.imports);\r\n      const { interfaceBody, serviceBody } = this.body(value.methods);\r\n      return `import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\n${imports}\r\nexport interface I${name}APIService {\r\n${interfaceBody}\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ${name}APIService implements I${name}APIService {\r\n  public serviceName: string;\r\n  public uri: string;\r\n  constructor(\r\n    public http: HttpClient) {\r\n    this.serviceName = '${name}API';\r\n    this.uri = '${value.uri}';\r\n  }\r\n${serviceBody}\r\n}\\r\\n`;\r\n    } else {\r\n      return '';\r\n    }\r\n\r\n  }\r\n}","import { IParserEnum } from './../../interfaces/parser';\r\nexport class EnumTemplate {\r\n  public body(value: IParserEnum): string {\r\n    const temp: string[] = [];\r\n    for (const param of value.value) {\r\n      temp.push(\r\n        `${param.key}= ${\r\n          parseInt(param.val.toString(), 10).toString() !== 'NaN'\r\n            ? param.val\r\n            : '\"' + param.val + '\"'\r\n        }`\r\n      );\r\n    }\r\n    return temp.join(',\\r\\n\\t');\r\n  }\r\n  public compile(value: IParserEnum): string {\r\n    return `\r\nexport enum ${value.name} {\r\n  ${this.body(value)}\r\n}\r\n`;\r\n  }\r\n}\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexport function resolve() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : '/';\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexport function normalize(path) {\n  var isPathAbsolute = isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!path && !isPathAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\nexport function join() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n}\n\n\n// path.relative(from, to)\n// posix version\nexport function relative(from, to) {\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\nexport var sep = '/';\nexport var delimiter = ':';\n\nexport function dirname(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n\n\nexport function extname(path) {\n  return splitPath(path)[3];\n}\nexport default {\n  extname: extname,\n  basename: basename,\n  dirname: dirname,\n  sep: sep,\n  delimiter: delimiter,\n  relative: relative,\n  join: join,\n  isAbsolute: isAbsolute,\n  normalize: normalize,\n  resolve: resolve\n};\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ?\n    function (str, start, len) { return str.substr(start, len) } :\n    function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","import { IParserModel } from './../../interfaces/parser';\r\nexport class ModelTemplate {\r\n  public modelImports(modelImports: string[], name: string) {\r\n    const imports = [];\r\n    if (modelImports.length === 0) {\r\n      return '';\r\n    }\r\n    imports.push(`import {`);\r\n    for (const item of modelImports) {\r\n      if (item !== name) {\r\n        imports.push(`${item},`);\r\n      }\r\n    }\r\n    imports.push(`} from './';`);\r\n    return imports.join('\\r\\n');\r\n  }\r\n\r\n  public body(value: any): { [key: string]: string } {\r\n    const itemp: string[] = [];\r\n    const temp: string[] = [];\r\n    for (const param of value) {\r\n      if (param.description) {\r\n        itemp.push(`/* ${param.description} */`);\r\n      }\r\n      itemp.push(`${param.name} : ${param.type};`);\r\n      temp.push(`public ${param.name}: ${param.type};`);\r\n    }\r\n    return {\r\n      iprop: itemp.join('\\r\\n\\t'),\r\n      prop: temp.join('\\r\\n\\t')\r\n    };\r\n  }\r\n  public compile(value: IParserModel) {\r\n    const { iprop } = this.body(value.props);\r\n    return `\r\n${this.modelImports(value.imports, value.name)}\r\n\r\nexport interface ${value.name} {\r\n  ${iprop}\r\n}\r\n`;\r\n  }\r\n}\r\n","import { ModuleTemplate } from './templates/module';\r\nimport { ServiceTemplate } from './templates/service';\r\nimport { Logger } from './logger';\r\nimport { EnumTemplate } from './templates/enum';\r\nimport {\r\n  IParserEnum,\r\n  IParserServiceList,\r\n  IParserModel,\r\n  IParserService\r\n} from './../interfaces/parser';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { ModelTemplate } from './templates/model';\r\nimport { paramCase } from 'change-case';\r\n\r\nexport class TemplatePrinter {\r\n  private out = '';\r\n  private enumCompiler: EnumTemplate = new EnumTemplate();\r\n  private modelCompiler: ModelTemplate = new ModelTemplate();\r\n  private serviceCompiler: ServiceTemplate = new ServiceTemplate();\r\n  private moduleCompiler: ModuleTemplate = new ModuleTemplate();\r\n  private _printedServices: string[] = [];\r\n  private _logger: Logger = new Logger();\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public createFolders(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        fs.mkdirSync(path.resolve(this.out));\r\n        fs.mkdirSync(path.resolve(this.out + '/models'));\r\n        fs.mkdirSync(path.resolve(this.out + '/models/enums'));\r\n        fs.mkdirSync(path.resolve(this.out + '/services'));\r\n        resolve();\r\n        return;\r\n      } catch (error) {\r\n        reject();\r\n      }\r\n    });\r\n  }\r\n\r\n  public print(\r\n    enums: IParserEnum[],\r\n    models: IParserModel[],\r\n    services: IParserServiceList,\r\n    out: string\r\n  ): Promise<any> {\r\n    this.out = out;\r\n    return new Promise<any>((resolve, reject) => {\r\n      this.createFolders()\r\n        .then(() => {\r\n          for (const item of enums) {\r\n            this.printEnum(item);\r\n          }\r\n          this.printEnumIndex(enums);\r\n          for (const item of models) {\r\n            this.printModel(item);\r\n          }\r\n          this.printModelIndex(models);\r\n          for (const name in services) {\r\n            if (services[name]) {\r\n              this.printService(services[name], name);\r\n            }\r\n          }\r\n          this.printServiceIndex();\r\n          this.printModule();\r\n          this.printIndex();\r\n          resolve();\r\n        })\r\n        .catch((err) => reject(err));\r\n    });\r\n  }\r\n  public printEnum(value: IParserEnum): void {\r\n    const compiled = this.enumCompiler.compile(value);\r\n    // this._logger.ok(path.resolve(this.out + '/models/enums/' + value.name + '.enum.ts'));\r\n    try {\r\n      fs.writeFileSync(\r\n        path.resolve(\r\n          this.out + '/models/enums/' + paramCase(value.name) + '.enum.ts'\r\n        ),\r\n        compiled\r\n      );\r\n    } catch (e) {\r\n      this._logger.err(\r\n        '[ ERROR ] file: ' +\r\n          this.out +\r\n          '/models/enums/' +\r\n          paramCase(value.name) +\r\n          '.enum.ts'\r\n      );\r\n    }\r\n  }\r\n  public printModel(model: IParserModel): void {\r\n    const compiled = this.modelCompiler.compile(model);\r\n    /// this._logger.ok(path.resolve(this.out + '/models/' + model.name + '.model.ts'));\r\n\r\n    fs.writeFile(\r\n      path.resolve(\r\n        this.out +\r\n          '/models/' +\r\n          paramCase(model.name).replace(/^i-/gi, '') +\r\n          '.model.ts'\r\n      ),\r\n      compiled,\r\n      (err) => {\r\n        if (err) {\r\n          this._logger.err(\r\n            '[ ERROR ] file: ' +\r\n              this.out +\r\n              '/models/' +\r\n              paramCase(model.name).replace(/^i-/gi, '') +\r\n              '.model.ts'\r\n          );\r\n          return;\r\n        }\r\n        this._logger.ok(\r\n          '[ OK    ] file: ' +\r\n            this.out +\r\n            '/models/' +\r\n            paramCase(model.name).replace(/^i-/gi, '') +\r\n            '.model.ts'\r\n        );\r\n      }\r\n    );\r\n  }\r\n  public printService(service: IParserService, name: string): void {\r\n    const compiled = this.serviceCompiler.compile(service, name);\r\n    if (compiled !== '') {\r\n      this._printedServices.push(name);\r\n      fs.writeFile(\r\n        path.resolve(this.out + '/services/' + paramCase(name) + '.service.ts'),\r\n        compiled,\r\n        (err) => {\r\n          if (err) {\r\n            this._logger.err(\r\n              '[ ERROR ] file: ' +\r\n                this.out +\r\n                '/services/' +\r\n                paramCase(name) +\r\n                '.service.ts'\r\n            );\r\n            return;\r\n          }\r\n          this._logger.ok(\r\n            '[ OK    ] file: ' +\r\n              this.out +\r\n              '/services/' +\r\n              paramCase(name) +\r\n              '.service.ts'\r\n          );\r\n        }\r\n      );\r\n    }\r\n  }\r\n  public printModule(): void {\r\n    const compiled = this.moduleCompiler.compile(this._printedServices);\r\n    fs.writeFile(path.resolve(this.out + '/api.module.ts'), compiled, (err) => {\r\n      if (err) {\r\n        this._logger.err('[ ERROR ] file: ' + this.out + '/api.module.ts');\r\n        return;\r\n      }\r\n      this._logger.ok('[ OK    ] file: ' + this.out + '/api.module.ts');\r\n    });\r\n  }\r\n  public printIndex(): void {\r\n    const imports = `export * from './services';\r\nexport * from './models';\r\nexport { APIModule } from './api.module';\r\n`;\r\n    try {\r\n      fs.writeFileSync(path.resolve(this.out + '/index.ts'), imports);\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/index.ts');\r\n    }\r\n  }\r\n  public printServiceIndex(): void {\r\n    const imports = [];\r\n    for (const item of this._printedServices) {\r\n      imports.push(\r\n        `export { ${item}APIService, I${item}APIService } from './${paramCase(\r\n          item\r\n        )}.service';`\r\n      );\r\n    }\r\n    imports.push('');\r\n    try {\r\n      fs.writeFileSync(\r\n        path.resolve(this.out + '/services/index.ts'),\r\n        imports.join('\\r\\n')\r\n      );\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/services/index.ts');\r\n    }\r\n  }\r\n  public printModelIndex(models: IParserModel[]): void {\r\n    const imports = [];\r\n    for (const item of models) {\r\n      imports.push(\r\n        `export { ${item.name} } from './${paramCase(item.name).replace(\r\n          /^i-/gi,\r\n          ''\r\n        )}.model';`\r\n      );\r\n    }\r\n    imports.push(`export * from './enums';`);\r\n    imports.push('');\r\n    try {\r\n      fs.writeFileSync(\r\n        path.resolve(this.out + '/models/index.ts'),\r\n        imports.join('\\r\\n')\r\n      );\r\n    } catch (e) {\r\n      this._logger.err('[ ERROR ] file: ' + this.out + '/models/index.ts');\r\n    }\r\n  }\r\n  public printEnumIndex(enums: IParserEnum[]): void {\r\n    const imports = [];\r\n    for (const item of enums) {\r\n      imports.push(\r\n        `export {${item.name}} from './${paramCase(item.name)}.enum';`\r\n      );\r\n    }\r\n    imports.push('');\r\n    try {\r\n      fs.writeFileSync(\r\n        path.resolve(this.out + '/models/enums/index.ts'),\r\n        imports.join('\\r\\n')\r\n      );\r\n    } catch (e) {\r\n      this._logger.err(\r\n        '[ ERROR ] file: ' + this.out + '/models/enums/index.ts'\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Parser } from './utils/parser';\r\nimport { ISwaggerConfig } from './interfaces/swagger.interface';\r\nimport { HelpCLI } from './utils/helpcli';\r\nimport { IGeneratorConfig } from './interfaces/config';\r\nimport * as fs from 'fs';\r\nimport { Logger } from './utils/logger';\r\nimport {\r\n  IParserEnum,\r\n  IParserModel,\r\n  IParserServiceList\r\n} from './interfaces/parser';\r\nimport { TemplatePrinter } from './utils/template-printer';\r\nimport fetch from 'node-fetch';\r\n\r\nexport default class Generator {\r\n  public config: IGeneratorConfig;\r\n  public swagger: ISwaggerConfig | null = null;\r\n  private parser: Parser = new Parser();\r\n  private helper: HelpCLI = new HelpCLI();\r\n  private _logger: Logger = new Logger();\r\n  private _printer: TemplatePrinter = new TemplatePrinter();\r\n  constructor(config: IGeneratorConfig | null = null) {\r\n    if (config) {\r\n      this.config = config;\r\n    } else {\r\n      this.config = this.helper.parseArgs();\r\n    }\r\n\r\n    if (this.config.help) {\r\n      this.helper.printHelp();\r\n    } else {\r\n      if (this.config.config !== '' && this.config.out !== '') {\r\n        this.start();\r\n      } else {\r\n        this._logger.err('Params not set, see help and try again:');\r\n        this.helper.printHelp();\r\n      }\r\n    }\r\n  }\r\n  public start() {\r\n    this.getConfig(this.config.config).then(\r\n      (res) => {\r\n        this._logger.info('<Parsing Processed...>');\r\n        this._logger.ok(JSON.stringify(res));\r\n        this.parser.parse(res).then(\r\n          (res: [IParserEnum[], IParserModel[], IParserServiceList]) => {\r\n            this._logger.ok('[ SUCCESS ]: Swagger JSON Parsed Successfull!');\r\n            this._logger.info('<Files Saving>');\r\n            let extend = null;\r\n            try {\r\n              extend = JSON.parse(\r\n                fs.readFileSync('./sw2ngx-extend.json', 'utf-8')\r\n              );\r\n            } catch (e) {\r\n              this._logger.info('Not have extends');\r\n            }\r\n            if (extend) {\r\n              if (extend.enums) {\r\n                res[0].push(...extend.enums);\r\n              }\r\n              if (extend.models) {\r\n                res[1].push(...extend.models);\r\n              }\r\n              if (extend.services) {\r\n                for (const key in extend.services) {\r\n                  if (extend.services[key]) {\r\n                    if (res[2][key]) {\r\n                      if (extend.services[key].imports) {\r\n                        res[2][key].imports.push(\r\n                          ...extend.services[key].imports\r\n                        );\r\n                      }\r\n                      if (extend.services[key].methods) {\r\n                        res[2][key].methods.push(\r\n                          ...extend.services[key].methods\r\n                        );\r\n                      }\r\n                    } else {\r\n                      res[2][key] = extend.services[key];\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            // fs.writeFileSync(path.resolve('./result.json'), JSON.stringify({\r\n            //     enums: res[0],\r\n            //     models: res[1],\r\n            //     services: res[2]\r\n            // }));\r\n            this._printer.print(res[0], res[1], res[2], this.config.out).then(\r\n              () => {\r\n                this._logger.ok(\r\n                  '[ SUCCESS ]: Generation API Module Successfull!'\r\n                );\r\n              },\r\n              (reject) => {\r\n                console.log('end here');\r\n                this._logger.err(JSON.stringify(reject));\r\n              }\r\n            );\r\n          },\r\n          (err) => {\r\n            this._logger.err(JSON.stringify(err));\r\n          }\r\n        );\r\n        // this._logger.info('<Create Swagger Map Object>');\r\n      },\r\n      (err) => {\r\n        this._logger.err(JSON.stringify(err));\r\n      }\r\n    );\r\n  }\r\n\r\n  private getConfig(conf: string): Promise<any> {\r\n    const promise = new Promise<any>((resolve, reject) => {\r\n      if (/http(s?):\\/\\/\\S/gi.test(conf)) {\r\n        fetch(conf)\r\n          .then((res: any) => {\r\n            resolve(res.json());\r\n          })\r\n          .catch((err: any) => {\r\n            this._logger.err(err);\r\n            reject(err);\r\n          });\r\n      } else {\r\n        this.swagger = JSON.parse(fs.readFileSync(conf, 'utf-8'));\r\n        resolve(this.swagger);\r\n      }\r\n    });\r\n\r\n    return promise;\r\n  }\r\n}\r\n","import Generator from './sw2ngx';\r\n\r\nexport default Generator;\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst app = new Generator();\r\n"],"names":["pascalCase","camelCase","paramCase","resolve","fs.mkdirSync","path.resolve","fs.writeFileSync","fs.writeFile","fs.readFileSync"],"mappings":"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"}