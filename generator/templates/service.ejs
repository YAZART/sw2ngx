import { Injectable } from '@angular/core';
import { Subject, Observable } from 'rxjs';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { I<%= name %>APIService } from './interfaces';
<%_ for( let imp of model.imports ){ _%>
import { <%= imp %> } from '../models';
<%_}_%>

@Injectable()
export class <%= name %>APIService implements I<%= name %>APIService {
    public serviceName: string;
    public uri: string;
    constructor(
        public http: HttpClient) {
        this.serviceName = '<%= name %>API';
        this.uri = '<%=model.uri%>';
    }
<% for(let method of model.methods){ %>
    /**
     * @method
     * @name  <%=method.name%>
     <%_ for(let param of method.params.all){_%>
     * @param {<%=param.type[0]%>} <%=param.name%>
     <%_}_%>
     */
    public <%=method.name%>(
        <%_ for(let i=0;i<method.params.all.length;i++){_%>
        <%=method.params.all[i].name%><%=method.params.all[i].required?'':'?'%>: <%=method.params.all[i].type[0]%><%=(i<method.params.all.length-1)?',':''%>
        <%_}_%>
    ): Observable<<%=method.resp.type%>> {
        const options = {
            headers: new HttpHeaders(),
            params: new HttpParams()};
        <%_ if(method.params.query.length!==0){_%>
        let paramString = '';
        <%_for(let i=0; i< method.params.query.length;i++){_%>
        if (<%=method.params.query[i].name%> !== undefined) {
            paramString += '<%_ if(i>0){_%>&<%_}_%><%=method.params.query[i].query_name%>=' + encodeURIComponent(<%=method.params.query[i].name%><%=method.params.query[i].type[0]==='Date'?'.toISOString()':'.toString()'_%>);
        }
        <%_}_%>
        options.params = new HttpParams({fromString: paramString});
        <%_}_%>
        <%_ if((method.type==='post')||(method.type==='put')){ _%>
        <%_ if(method.params.form.length!==0) {_%>
        options.headers = new HttpHeaders();
        options.headers.delete('Content-Type');
        const form = new FormData();
        <%_for(let param of method.params.form){_%>
        form.append('<%=param.name%>', <%=param.name%>);
        <%_}_%>
        return this.http.<%=method.type%><<%=method.resp.type%>>(this.uri + `<%=method.uri%>`, form, options);
        <%_} else {_%>
        // tslint:disable-next-line:prefer-const
        let payload = {};
        options.headers = new HttpHeaders({'Content-Type': 'application/json; charset=utf-8'});
        <%_ if(method.params.payload.length>1){_%>
        <%_for(let param of method.params.payload){_%>
        payload['<%=param.name%>'] =<%=param.name%>;
        <%_}_%>
        <%_} else {_%>
        <%_ if(method.params.payload.length>0){_%>
        payload = <%=method.params.payload[0].name%>;
        <%_}_%>
        <%_}_%>
        return this.http.<%=method.type%><<%=method.resp.type%>>(this.uri + `<%=method.uri%>`, JSON.stringify(payload), options);
        <%_}_%>
        <%_}_%>

        <%_if((method.type==='get')||(method.type==='delete')){_%>
        return this.http.<%=method.type%><<%=method.resp.type%>>(this.uri + `<%=method.uri%>`<%=method.params.query.length!==0?', options':''%>);
        <%_}_%>
    }<%}%>

}
